<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="mscorlib" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Element.ttinclude"#>
<#@ include file="StringHelper.ttinclude"#>
<#@ parameter name="input_name" type="System.String" #>
<#@ parameter name="types" type="System.String[]" #>
<#@ parameter name="groups" type="System.String[]" #>
<#@ parameter name="views" type="System.String[]" #>

<#	
	string class_namespace = "Maidis.VNext.";
	// Open the prototype document.
	XElement doc = XElement.Load(input_name);

	// Get the nampespaces 
	XNamespace NP = doc.GetDefaultNamespace();
    XNamespace xmlns_xsi = "http://www.w3.org/2001/XMLSchema-instance";

	// list of group
	List<string> list_group = new List<string>();

	// Map idProperty - PropertyName
	Dictionary<string, string> property_definition_map = new Dictionary<string, string>();

	// Map group_id - list_id_elements + list_id_interface
	Dictionary<string, Dictionary<string,List<string>>> dict_group = new Dictionary<string, Dictionary<string,List<string>>>();

	// Map group_id - namespace
	Dictionary<string, string> dict_group_name = new Dictionary<string, string>();

	// Map id_element - namespace
	Dictionary<string, string> dict_namespace = new Dictionary<string, string>();

	// Map view_id - list_id_elements
	Dictionary<string, List<string>> dict_view = new Dictionary<string, List<string>>();
	
	// Map identifier - element
	Dictionary<string, Element> dict_element = new Dictionary<string, Element>();

	// MultiMap of composition
	Dictionary<string, List<string>> mmap_compostion = new Dictionary<string, List<string>>();

	// MultiMap of aggregation
	Dictionary<string, List<string>> mmap_aggregation = new Dictionary<string, List<string>>();

	// Map of specialization of class
	Dictionary<string, List<string>> mmap_specialization = new Dictionary<string, List<string>>();

	// MultiMap of association
	Dictionary<string, List<string>> mmap_association = new Dictionary<string, List<string>>();

	// MultiMap of access
	Dictionary<string, List<string>> mmap_access = new Dictionary<string, List<string>>();

	// List of errors
	List<string> errors = new List<string>();

	// List of class created
	List<string> classes = new List<string>();

	// Make the map of property definition
	IEnumerable<XElement> prop_defs = from element in doc.Descendants(NP + "propertyDefinition")
									  select element;
    foreach (XElement ele in prop_defs)
    {
        property_definition_map.Add(ele.Attribute("identifier").Value, (ele.Element(NP + "name").Value != null) ? ele.Element(NP + "name").Value.Replace("att_","") : "");
    }

	// Make the map of id - element
	foreach(var ele in doc.Descendants(NP + "element"))
    {
		Element element = new Element();
		element.Identifier_ = ele.Attribute("identifier").Value;
		element.Name_ = (ele.Element(NP + "name") != null) ? ele.Element(NP + "name").Value : "";
		element.Documentation_ = (ele.Element(NP + "documentation") != null) ? ele.Element(NP + "documentation").Value : "";	
		element.Type_ = ele.Attribute(xmlns_xsi + "type").Value;	
		Dictionary<string, string> properties = new Dictionary<string, string>();
		if(ele.Descendants(NP + "properties") != null)
			foreach(var i in ele.Descendants(NP + "property"))
				properties.Add(property_definition_map[i.Attribute("propertyDefinitionRef").Value],i.Element(NP + "value").Value);
		element.Properties_ = properties;
		if(properties.Keys.Contains("Implementation")&&properties["Implementation"].Length>0)
			element.Class_name_ = properties["Implementation"];
		else
			element.Class_name_ = element.Name_;
		dict_element.Add(element.Identifier_, element);
    }

	// Make the map of views
	IEnumerable<XElement> xeles_view = from e in doc.Descendants(NP + "view")
									   where views == null ||
										     views.Contains(e.Element(NP + "name").Value) ||
											 views.Count() == 0
									   select e;
	foreach(var ele in xeles_view)
	{
		List<string> list_ele_child = new List<string>();
		List<string> list_group_child = new List<string>();
		findAllElement(dict_element, xmlns_xsi, NP, doc, ele, ref list_ele_child,  ref list_group_child);
		dict_view.Add(ele.Attribute("identifier").Value,list_ele_child);
		list_group.AddRange(list_group_child);
	}

	// Make the map of group name
	IEnumerable<XElement> xeles_all_group = from e in doc.Descendants(NP + "element")
										where e.Attribute(xmlns_xsi + "type").Value == "Grouping"
										select e;
	foreach(var ele in xeles_all_group)
	{
		dict_group_name.Add(ele.Attribute("identifier").Value,class_namespace + ele.Element(NP + "name").Value);
	}

	// Make the map of groups
	IEnumerable<XElement> xeles_group = from e in doc.Descendants(NP + "element")
										where (e.Attribute(xmlns_xsi + "type").Value == "Grouping") &&
											  (list_group.Contains(e.Attribute("identifier").Value) ||
											  (groups!=null && groups.Contains(e.Element(NP + "name").Value)))
										select e;
	foreach(var ele in xeles_group)
	{
		Dictionary<string,List<string>> dict = new Dictionary<string,List<string>>();
		
		List<string> list_target = new List<string>();
		List<string> list_interface = new List<string>();
		IEnumerable<XElement> xeles_target = from e in doc.Descendants(NP + "relationship")
										     where e.Attribute("source").Value == ele.Attribute("identifier").Value && e.Attribute(xmlns_xsi + "type").Value == "Composition"
											 select e;
		if (xeles_target!=null&&xeles_target.Count()!=0)
		{
			foreach(var eg in xeles_target)
			{
				if (dict_element[eg.Attribute("target").Value].Type_.Contains("Interface"))
					list_interface.Add(eg.Attribute("target").Value);
				else
					list_target.Add(eg.Attribute("target").Value);
				if(!dict_namespace.Keys.Contains(eg.Attribute("target").Value))
					dict_namespace.Add(eg.Attribute("target").Value, class_namespace + ele.Element(NP + "name").Value);
			}
			dict.Add("class",list_target);
			dict.Add("interface",list_interface);
			dict_group.Add(ele.Attribute("identifier").Value, dict);
		}


	}	

	// Make the mmap of access
	if(groups!=null)
		list_group.AddRange(new List<string>(groups));
	foreach(var g in list_group)
	{
		IEnumerable<XElement> xeles_access = from e in doc.Descendants(NP + "relationship")
											 where e.Attribute("source").Value == g && e.Attribute(xmlns_xsi + "type").Value == "Access"
											 select e;
		List<string> list_lib = new List<string>();
		if (xeles_access!=null&&xeles_access.Count()!=0)
		{
			foreach(var eg in xeles_access)
			{
				
				list_lib.Add(eg.Attribute("target").Value);
			}
			mmap_access.Add(g,list_lib);
		}	
	}
	
	// Make the multimap of compostion-relationship
	IEnumerable<XElement> xeles_compostion = from e in doc.Descendants(NP + "relationship")
											 where e.Attribute(xmlns_xsi + "type").Value == "Composition"
											 select e;
	foreach(var ele in xeles_compostion)
    {
		List<string> list_target;
		if (mmap_compostion.TryGetValue(ele.Attribute("source").Value, out list_target))
        {
            list_target.Add(ele.Attribute("target").Value);
        }
        else
        {
            list_target = new List<string>();
            list_target.Add(ele.Attribute("target").Value);
            mmap_compostion[ele.Attribute("source").Value] = list_target;
        }
		//mmap_compostion.Add(ele.Attribute("source").Value,ele.Attribute("target").Value);
    }

	// Make the map of specialzation-relationship
	IEnumerable<XElement> xeles_specialization = from e in doc.Descendants(NP + "relationship")
												 where e.Attribute(xmlns_xsi + "type").Value == "Specialization"
												 select e;
	foreach(var ele in xeles_specialization)
    {
		string id_child = ele.Attribute("source").Value;
		string id_parent = ele.Attribute("target").Value;

		Element element_child = dict_element[id_child];
		Element element_parent = dict_element[id_parent];

		List<string> list_parent = new List<string>();

		if (!mmap_specialization.ContainsKey(id_child))
		{
			list_parent.Add(id_parent);
			mmap_specialization.Add(id_child,list_parent);
		}
		else 
		{
			mmap_specialization[id_child].Add(id_parent);
		}
    }

	// Make the multimap of aggregation-relationship
	IEnumerable<XElement> xeles_aggregation = from e in doc.Descendants(NP + "relationship")
											  where e.Attribute(xmlns_xsi + "type").Value == "Aggregation"
											  select e;
	foreach(var ele in xeles_aggregation)
    {
		List<string> list_target;
		if (mmap_aggregation.TryGetValue(ele.Attribute("source").Value, out list_target))
        {
            list_target.Add(ele.Attribute("target").Value);
        }
        else
        {
            list_target = new List<string>();
            list_target.Add(ele.Attribute("target").Value);
            mmap_aggregation[ele.Attribute("source").Value] = list_target;
        }
    }

	// Make the multimap of association-relationship
	IEnumerable<XElement> xeles_association = from e in doc.Descendants(NP + "relationship")
											  where e.Attribute(xmlns_xsi + "type").Value == "Association"
											  select e;
	foreach(var ele in xeles_association)
    {
		List<string> list_target;
		if (mmap_association.TryGetValue(ele.Attribute("source").Value, out list_target))
        {
            list_target.Add(ele.Attribute("target").Value);
        }
        else
        {
            list_target = new List<string>();
            list_target.Add(ele.Attribute("target").Value);
            mmap_association[ele.Attribute("source").Value] = list_target;
        }
    }
#>

using System.Collections.Generic;

<#
	// Generate used namespaces
	foreach(var id_group in mmap_access.Keys)
	{
		foreach(var id in mmap_access[id_group])
		{
#>
using <#= dict_group_name[id] #>
<#
		}
	}
#>

<#
	// Generate classes from group
	// Get all the Xelements 
	//IEnumerable<XElement> xelements = from e in doc.Descendants(NP + "element")
	//								  where types.Contains(e.Attribute(xmlns_xsi + "type").Value) 
	//								  select e;
	foreach(var id_group in dict_group.Keys)
	{
		List<string> list_idElement = dict_group[id_group]["class"];
		List<string> list_idInterface = dict_group[id_group]["interface"];
#>
namespace <#= dict_group_name[id_group] #>
{
<#
		foreach(var id_interface in list_idInterface)
		{
			Element ele_interface = dict_element[id_interface]; 
			string class_name = ele_interface.Class_name_;
			if (!mmap_specialization.Keys.Contains(id_interface))
			{
#>
	public interface <#= StringHelper.UpperString(class_name) #> 
	{
	}

<#	
			}
			else
			{
				List<string> list_parent_name = new List<string>();
				foreach(var e in mmap_specialization[id_interface])
					list_parent_name.Add(dict_element[e].Class_name_);
				string str_parents = String.Join(",", list_parent_name.Select(i => i.ToString()).ToArray());
#>
	public interface <#= StringHelper.UpperString(class_name) #> : <#= str_parents#>
	{
	}

<#
			}
		}

		foreach(var id_element in list_idElement)
		{
			Element ele; 
			string class_name;
			if (types.Contains(dict_element[id_element].Type_)&&(((groups==null||groups.Length==0)&&(views==null||views.Length==0))||isInSelectedGroups(id_element,dict_group)||isInSelectedViews(id_element,dict_view)))
			{
				classes.Add(id_element);
				ele = dict_element[id_element];
				class_name = ele.Class_name_;
				if (!mmap_specialization.Keys.Contains(id_element))
				{
#>
	[ModelElement("<#= class_name #>","<#= StringHelper.DocumentationTraitement(ele.Documentation_) #>, ElementType = "<#= ele.Type_ #>Archimate")]
	partial class <#= StringHelper.UpperString(class_name) #> 
	{
<#	
				}
				else
				{
					List<string> list_parent_name = new List<string>();
					foreach(var e in mmap_specialization[id_element])
						list_parent_name.Add(dict_element[e].Class_name_);
					string str_parents = String.Join(",", list_parent_name.Select(i => i.ToString()).ToArray());
#>
	[ModelElement("<#= class_name #>","<#= StringHelper.DocumentationTraitement(ele.Documentation_) #>, ElementType = "<#= ele.Type_ #>Archimate")]
	partial class <#= StringHelper.UpperString(class_name) #> : <#= str_parents#>
	{
<#
				}

				foreach(var p in ele.Properties_.Keys)
				{
#>	
		<#= ele.Properties_[p] #> <#= p #>;
<#
				}

				// Generate composition relationship.
				if(mmap_compostion.Keys.Contains(id_element))
				{
					foreach (var idTarget in mmap_compostion[id_element])
					{
						Element elementTarget = dict_element[idTarget];
						if (((groups==null||groups.Length==0)&&(views==null||views.Length==0))||isInSelectedGroups(idTarget,dict_group)||isInSelectedViews(idTarget,dict_view))
						{
#>
		List<<#= StringHelper.UpperString(elementTarget.Class_name_) #>> <#= StringHelper.LowerString(elementTarget.Class_name_) #>_ = 
			new List<<#= StringHelper.UpperString(elementTarget.Class_name_) #>>();
<#
						}
					}
				}

				// Generate aggregation relationship.
				if(mmap_aggregation.Keys.Contains(id_element))
				{
					foreach (var idTarget in mmap_aggregation[id_element])
					{
						Element elementTarget = dict_element[idTarget];
						if (((groups==null||groups.Length==0)&&(views==null||views.Length==0))||isInSelectedGroups(idTarget,dict_group)||isInSelectedViews(idTarget,dict_view))
						{
#>
		List<<#= StringHelper.UpperString(elementTarget.Class_name_) #>> <#= StringHelper.LowerString(elementTarget.Class_name_) #>_ ;
<#
						}
					}
				}

				// Generate association relationship.
				if(mmap_association.Keys.Contains(id_element))
				{
					foreach (var idTarget in mmap_association[id_element])
					{
						Element elementTarget = dict_element[idTarget];
						if (((groups==null||groups.Length==0)&&(views==null||views.Length==0))||isInSelectedGroups(idTarget,dict_group)||isInSelectedViews(idTarget,dict_view))
						{
#>
		<#= StringHelper.UpperString(elementTarget.Class_name_) #> <#= StringHelper.LowerString(elementTarget.Class_name_) #>_ ;

<#
						}
					}
				}
#>
	}
<#
			}
		}
#>
}
<#
	}
#>

<Log> 
<#
	if (errors.Count()>0)
	{
#>
	<Errors>
<#
		foreach(string err in errors)
		{
#>
		<Error> <#= err #> </Error>
<#
		}
#>
	</Errors>
<#
	}
#>
</Log>

<#+
	private bool isInSelectedGroups(string id, Dictionary<string, Dictionary<string,List<string>>> dict_group)
	{
		foreach(var g in dict_group.Keys)
		{
			foreach(var sg in dict_group[g].Keys)
				if(dict_group[g][sg].Contains(id))
					return true;
		}
		return false;
	}

	private bool isInSelectedViews(string id, Dictionary<string, List<string>> dict_view)
	{
		foreach(var v in dict_view.Keys)
		{
			if(dict_view[v].Contains(id))
				return true;
		}
		return false;
	}

	private void findAllElement(Dictionary<string, Element> dict_element, XNamespace xmlns_xsi, XNamespace NP, XElement root, XElement node, ref List<string> list, ref List<string> list_group)
	{
		IEnumerable<XElement> xeles_node = from e in node.Descendants(NP + "node")
										   select e;
		foreach(var n in xeles_node)
		{
			if(n.Attribute(xmlns_xsi + "type").Value=="Element")
			{
				string id = n.Attribute("elementRef").Value;
				if(!dict_element[id].Type_.Equals("Grouping"))
					list.Add(n.Attribute("elementRef").Value);
				else
					list_group.Add(n.Attribute("elementRef").Value);
			}
			else if(n.Attribute(xmlns_xsi + "type").Value=="Label" && n.Element(NP + "viewRef")!=null)
			{
				XElement container = root.Descendants(NP + "view").FirstOrDefault(el => el.Attribute("identifier").Value == n.Element(NP + "viewRef").Attribute("ref").Value);
				findAllElement(dict_element, xmlns_xsi, NP, root, container, ref list, ref list_group);
			}
			else if(n.Attribute(xmlns_xsi + "type").Value=="Container")
			{
				findAllElement(dict_element, xmlns_xsi, NP, root, n, ref list, ref list_group);
			}
		}
	}
#>