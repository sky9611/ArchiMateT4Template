<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="mscorlib" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.TextTemplating.Interfaces" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FichierGenerator" #>
<#@ parameter name="archiDocument" type="FichierGenerator.ArchiDocumentSerialized" #>
<#@ parameter name="id_element" type="System.String" #>
<#@ parameter name="id_business_object" type="System.String" #>
<#@ include file="InitVar.ttinclude" #>

<?xml version = "1.0" encoding = "utf-8"?>

<hibernate-mapping>
<#
	Element data_object = archiDocument.Dict_element[id_element];
	Element business_object = archiDocument.Dict_element[id_business_object];
#>
	<class name = "<#= business_object.Class_name_ #>" table = "<#= UpperString(data_object.Class_name_) #>">
<#
	foreach(var i in business_object.Properties_.Keys)
	{
		if (!i.Contains("$"))
		{
			string name = i;
			string type = business_object.Properties_[i];
#>      
      <property name = "<#= name #>" column = "<#= name #>" type = "<#= type #>"/>
<#
		}
	}
#>          
   </class>
</hibernate-mapping>
<#+
	// Method for creating the class name, deleting the spaces, special characters and uppercasing the string
	public string UpperString(string name)
	{
		//name = Regex.Replace(name, @"\s\(.*\)", "");
		name = name.Replace(".", " ");
        name = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(name);
        name = name.Replace(" ", "");
		name = Regex.Replace(name, @"[^\w\.@_]", "");
		return name[0].ToString().ToUpperInvariant() + name.Substring(1);
	}
#>