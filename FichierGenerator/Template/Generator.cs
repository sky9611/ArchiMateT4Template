// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FichierGenerator.Template
{
    using System;
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    using System.Text;
    using System.Text.RegularExpressions;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Generator : GeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 21 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
	string[] class_types = {
			"Produit",
			"ApplicationFunction",
            "BusinessObject",
            "Contract",
            "Representation",
            "DataObject",
            "ApplicationService",
            "ApplicationComponent",
            "ApplicationEvent",
            "ApplicationProcess"};
	string class_namespace = name_space;
	// Open the prototype document.
	XElement doc = XElement.Load(input_name);

	// Get the nampespaces 
	XNamespace NP = doc.GetDefaultNamespace();
    XNamespace xmlns_xsi = "http://www.w3.org/2001/XMLSchema-instance";

	// Map id_element - all elements related
	Dictionary<string, List<string>> dict_related_element = new Dictionary<string, List<string>>();

	// list of group
	List<string> list_group = new List<string>();

	// list of elements
	List<string> list_element = new List<string>();

	// Map idProperty - PropertyName
	Dictionary<string, string> property_definition_map = new Dictionary<string, string>();

	// Map group_id - list_id_elements + list_id_interface
	Dictionary<string, Dictionary<string,List<string>>> dict_group = new Dictionary<string, Dictionary<string,List<string>>>();

	// Map group_id - namespace
	Dictionary<string, string> dict_group_name = new Dictionary<string, string>();

	// Map id_element - namespace
	Dictionary<string, string> dict_namespace = new Dictionary<string, string>();

	// Map id_element - group
	Dictionary<string, string> dict_element_group = new Dictionary<string, string>();

	// Map view_id - list_id_elements
	Dictionary<string, List<string>> dict_view = new Dictionary<string, List<string>>();
	
	// Map identifier - element
	Dictionary<string, Element> dict_element = new Dictionary<string, Element>();

	// Map identifier - relationship name
	Dictionary<Tuple<string, string>, string> dict_relationship = new Dictionary<Tuple<string, string>, string>();

	// MultiMap of id_element - [source|target] - [type de relation] - list_id_element
	Dictionary<string, Dictionary<string, Dictionary<string, List<string>>>> mmap_relationship = new Dictionary<string, Dictionary<string, Dictionary<string, List<string>>>>();

	// MultiMap of composition
	Dictionary<string, List<string>> mmap_compostion = new Dictionary<string, List<string>>();

	// MultiMap of aggregation
	Dictionary<string, List<string>> mmap_aggregation = new Dictionary<string, List<string>>();

	// Map of specialization of class
	Dictionary<string, List<string>> mmap_specialization = new Dictionary<string, List<string>>();

	// MultiMap of association
	Dictionary<string, List<string>> mmap_association = new Dictionary<string, List<string>>();

	// MultiMap of group access (to generate using ...)
	Dictionary<string, List<string>> mmap_group_access = new Dictionary<string, List<string>>();

	// MultiMap of element access (a kind of relationship between elements)
	Dictionary<string, List<string>> mmap_element_access = new Dictionary<string, List<string>>();

	// List of errors
	List<string> errors = new List<string>();

	// List of class created
	List<string> classes = new List<string>();

	// Make the map of property definition
	IEnumerable<XElement> prop_defs = from element in doc.Descendants(NP + "propertyDefinition")
									  select element;
    foreach (XElement ele in prop_defs)
    {
        property_definition_map.Add(ele.Attribute("identifier").Value, (ele.Element(NP + "name").Value != null) ? ele.Element(NP + "name").Value.Replace("att_","") : "");
    }

	// Make the map of id - relationship name
	foreach(var rl in doc.Descendants(NP + "relationship"))
    {
		Tuple<string, string> tuple = new Tuple<string, string>(rl.Attribute("source").Value,rl.Attribute("target").Value);
		if(rl.Element(NP+"name")!=null&&!dict_relationship.ContainsKey(tuple))
			dict_relationship.Add(tuple,rl.Element(NP+"name").Value);
	}

	// Make the map of id - element
	foreach(var ele in doc.Descendants(NP + "element"))
    {
		Element element = new Element();
		element.Identifier_ = ele.Attribute("identifier").Value;
		element.Name_ = (ele.Element(NP + "name") != null) ? ele.Element(NP + "name").Value : "";
		element.Documentation_ = (ele.Element(NP + "documentation") != null) ? ele.Element(NP + "documentation").Value : "";	
		element.Type_ = ele.Attribute(xmlns_xsi + "type").Value;	
		Dictionary<string, string> properties = new Dictionary<string, string>();
		if(ele.Descendants(NP + "properties") != null)
			foreach(var i in ele.Descendants(NP + "property"))
				properties.Add(property_definition_map[i.Attribute("propertyDefinitionRef").Value],i.Element(NP + "value").Value);
		element.Properties_ = properties;
		if(properties.Keys.Contains("Implementation")&&properties["Implementation"].Length>0)
			element.Class_name_ = properties["Implementation"];
		else
			element.Class_name_ = element.Name_;
		dict_element.Add(element.Identifier_, element);
    }

	// Make the map of relationship
	foreach(var ele in doc.Descendants(NP + "relationship"))
    {
		string relationship_type = ele.Attribute(xmlns_xsi + "type").Value;
		string id_source = ele.Attribute("source").Value;
		string id_target = ele.Attribute("target").Value;
		Dictionary<string, Dictionary<string, List<string>>> dict_source_relationship;
		Dictionary<string, Dictionary<string, List<string>>> dict_target_relationship;
		if (mmap_relationship.TryGetValue(id_source, out dict_source_relationship))
		{
			List<string> list;
			if (dict_source_relationship["source"].TryGetValue(relationship_type, out list))
			{
				list.Add(id_target);
				if(relationship_type.Equals("Access") && ele.Attribute("accessType").Equals("ReadWrite"))
				{
					List<string> list2;
					if (dict_source_relationship["target"].TryGetValue(relationship_type, out list2))
					{
						list2.Add(id_target);
						dict_source_relationship["target"][relationship_type] = list2;
					}
					else
					{
						list2 = new List<string>();
						list2.Add(id_target);
						dict_source_relationship["target"].Add(relationship_type, list2);
					}
				}
				dict_source_relationship["source"][relationship_type] = list;
			}
			else
			{
				list = new List<string>();
				list.Add(id_target);
				if(relationship_type.Equals("Access") && ele.Attribute("accessType").Equals("ReadWrite"))
				{
					List<string> list2;
					if (dict_source_relationship["target"].TryGetValue(relationship_type, out list2))
					{
						list2.Add(id_target);
						dict_source_relationship["target"][relationship_type] = list2;
					}
					else
					{
						list2 = new List<string>();
						list2.Add(id_target);
						dict_source_relationship["target"].Add(relationship_type, list2);
					}
				}
				dict_source_relationship["source"].Add(relationship_type, list);
			}
			mmap_relationship[id_source] = dict_source_relationship;
		}
		else
		{
			dict_source_relationship = new Dictionary<string, Dictionary<string, List<string>>>();
			Dictionary<string, List<string>> dict2 = new Dictionary<string, List<string>>();
			List<string> list = new List<string>();
			list.Add(id_target);
			dict2.Add(relationship_type, list);
			dict_source_relationship.Add("source", dict2);
			dict_source_relationship.Add("target", new Dictionary<string, List<string>>());
			if(relationship_type.Equals("Access") && ele.Attribute("accessType").Equals("ReadWrite"))
			{
				List<string> list2 = new List<string>();
				list2.Add(id_target);
				dict_source_relationship["target"].Add(relationship_type, list2);
			}
			mmap_relationship.Add(id_source, dict_source_relationship);
		}

		if (mmap_relationship.TryGetValue(id_target, out dict_target_relationship))
		{
			List<string> list;
			if (dict_target_relationship["target"].TryGetValue(relationship_type, out list))
			{
				list.Add(id_source);
				if(relationship_type.Equals("Access") && ele.Attribute("accessType").Equals("ReadWrite"))
				{
					List<string> list2;
					if (dict_target_relationship["source"].TryGetValue(relationship_type, out list2))
					{
						list2.Add(id_source);
						dict_target_relationship["source"][relationship_type] = list2;
					}
					else
					{
						list2 = new List<string>();
						list2.Add(id_source);
						dict_target_relationship["source"].Add(relationship_type, list2);
					}
				}
				dict_target_relationship["target"][relationship_type] = list;
			}
			else
			{
				list = new List<string>();
				list.Add(id_source);
				if(relationship_type.Equals("Access") && ele.Attribute("accessType").Equals("ReadWrite"))
				{
					List<string> list2;
					if (dict_target_relationship["source"].TryGetValue(relationship_type, out list2))
					{
						list2.Add(id_source);
						dict_target_relationship["source"][relationship_type] = list2;
					}
					else
					{
						list2 = new List<string>();
						list2.Add(id_source);
						dict_target_relationship["source"].Add(relationship_type, list2);
					}
				}
				dict_target_relationship["target"].Add(relationship_type, list);
			}
			mmap_relationship[id_target] = dict_target_relationship;
		}
		else
		{
			dict_target_relationship = new Dictionary<string, Dictionary<string, List<string>>>();
			Dictionary<string, List<string>> dict2 = new Dictionary<string, List<string>>();
			List<string> list = new List<string>();
			list.Add(id_source);
			dict2.Add(relationship_type, list);
			dict_target_relationship.Add("target", dict2);
			dict_target_relationship.Add("source", new Dictionary<string, List<string>>());
			if(relationship_type.Equals("Access") && ele.Attribute("accessType").Equals("ReadWrite"))
			{
				List<string> list2 = new List<string>();
				list2.Add(id_source);
				dict_target_relationship["source"].Add(relationship_type, list2);
			}
			mmap_relationship.Add(id_target, dict_target_relationship);
		}
	}

	// Make the map of views
	IEnumerable<XElement> xeles_view = from e in doc.Descendants(NP + "view")
									   where views == null ||
										     views.Contains(e.Element(NP + "name").Value) ||
											 views.Count() == 0
									   select e;
	foreach(var ele in xeles_view)
	{
		List<string> list_ele_child = new List<string>();
		List<string> list_group_child = new List<string>();
		findAllElement(dict_element, xmlns_xsi, NP, doc, ele, ref list_ele_child,  ref list_group_child);
		dict_view.Add(ele.Attribute("identifier").Value,list_ele_child);
		list_group.AddRange(list_group_child);
		list_element.AddRange(list_ele_child);
	}

	// Make the map of group name
	IEnumerable<XElement> xeles_all_group = from e in doc.Descendants(NP + "element")
										where e.Attribute(xmlns_xsi + "type").Value == "Grouping"
										select e;
	foreach(var ele in xeles_all_group)
	{
		dict_group_name.Add(ele.Attribute("identifier").Value,class_namespace + StringHelper.UpperString(ele.Element(NP + "name").Value));
	}

	// Make the map of all groups
	dict_group_name.Add("id-GroupeUnConnu", class_namespace + "Unconnu");
	Dictionary<string,List<string>> dict_temp = new Dictionary<string,List<string>>();
	List<string> list_element_temp = new List<string>();
	List<string> list_interface_temp = new List<string>();
	dict_temp.Add("class",list_element_temp);
	dict_temp.Add("interface",list_interface_temp);
	dict_group.Add("id-GroupeUnConnu", dict_temp);
	IEnumerable<XElement> xeles_group = from e in doc.Descendants(NP + "element")
										where e.Attribute(xmlns_xsi + "type").Value == "Grouping"
										select e;
	foreach(var ele in xeles_group)
	{
		if(!dict_namespace.ContainsKey(ele.Element(NP+"name").Value))
			dict_namespace.Add(ele.Element(NP+"name").Value, ele.Attribute("identifier").Value);
		Dictionary<string,List<string>> dict = new Dictionary<string,List<string>>();
		
		List<string> list_target = new List<string>();
		List<string> list_interface = new List<string>();
		IEnumerable<XElement> xeles_target = from e in doc.Descendants(NP + "relationship")
										     where e.Attribute("source").Value == ele.Attribute("identifier").Value && e.Attribute(xmlns_xsi + "type").Value == "Composition"
											 select e;
		if (xeles_target!=null&&xeles_target.Count()!=0)
		{
			foreach(var eg in xeles_target)
			{
				if (dict_element[eg.Attribute("target").Value].Type_.Equals("ApplicationInterface"))
					list_interface.Add(eg.Attribute("target").Value);
				else
					list_target.Add(eg.Attribute("target").Value);
				if(!dict_element_group.Keys.Contains(eg.Attribute("target").Value))
					dict_element_group.Add(eg.Attribute("target").Value, ele.Attribute("identifier").Value);
			}
			dict.Add("class",list_target);
			dict.Add("interface",list_interface);
			dict_group.Add(ele.Attribute("identifier").Value, dict);
		}
	}	

	// Make the list of related group and elements
	if(groups!=null)
	{
		foreach(var g in groups)
		{
			var key = dict_namespace[g];
			if (dict_group.ContainsKey(key))
				list_group.Add(key);
		}
	}
	foreach(var ele in dict_view.Keys)
	{
		foreach(var i in dict_view[ele])
		{
			var id_group = dict_group.FirstOrDefault(x => x.Value["class"].Contains(i)||x.Value["interface"].Contains(i)).Key;
			if (id_group!=null)
				list_group.Add(id_group);
		}
	}
	list_group = list_group.Distinct().ToList();

	var list_group_new = list_group.Intersect(dict_group.Keys);
	foreach(var g in list_group_new)
	{
		if (dict_group.ContainsKey(g))
		{
			list_element.AddRange(dict_group[g]["class"]);
			list_element.AddRange(dict_group[g]["interface"]);
		}

	}
	list_element = list_element.Distinct().ToList();

	foreach(var e in list_element)
	{
		if(!dict_element.ContainsKey(e))
		{
			list_element.Remove(e);
		}
		else if(!dict_element_group.ContainsKey(e))
		{
			if (!list_group.Contains("id-GroupeUnConnu"))
				list_group.Add("id-GroupeUnConnu");
			if (dict_element[e].Type_.Equals("ApplicationInterface"))
				dict_group["id-GroupeUnConnu"]["interface"].Add(e);
			else
				dict_group["id-GroupeUnConnu"]["class"].Add(e);
		}
	}

	// Make the map of relationship
	foreach(var ele in list_element)
	{
		IEnumerable<XElement> xeles_related = from e in doc.Descendants(NP + "relationship")
											  where e.Attribute("source").Value.Equals(ele) ||
												    e.Attribute("target").Value.Equals(ele)
											  select e;
		foreach(var i in xeles_related)
		{
			if (i.Attribute("source").Value.Equals(ele))
			{
				List<string> list;
				if (dict_related_element.TryGetValue(ele, out list))
				{
					list.Add(i.Attribute("target").Value);
				}
				else
				{
					list = new List<string>();
					list.Add(i.Attribute("target").Value);
					dict_related_element[ele] = list;
				}
			}
			else
			{
				List<string> list;
				if (dict_related_element.TryGetValue(ele, out list))
				{
					list.Add(i.Attribute("source").Value);
				}
				else
				{
					list = new List<string>();
					list.Add(i.Attribute("source").Value);
					dict_related_element[ele] = list;
				}
			}
		}
	}

	// Make the mmap of group access

	foreach(var g in list_group_new)
	{
		if(!mmap_group_access.ContainsKey(g))
		{
			IEnumerable<XElement> xeles_access = from e in doc.Descendants(NP + "relationship")
												 where e.Attribute("source").Value == g && 
													   e.Attribute(xmlns_xsi + "type").Value == "Access"
												 select e;
			List<string> list_lib = new List<string>();
			if (xeles_access!=null&&xeles_access.Count()!=0)
			{
				foreach(var eg in xeles_access)
				{
					if (dict_element[eg.Attribute("target").Value].Type_.Equals("Grouping"))
						list_lib.Add(eg.Attribute("target").Value);
				}
				mmap_group_access.Add(g,list_lib);
			}	
		}
	}


	
	// Make the mmap of element access
	IEnumerable<XElement> xeles_element_access = from e in doc.Descendants(NP + "relationship")
										 where (!list_group_new.Contains(e.Attribute("source").Value)) && e.Attribute(xmlns_xsi + "type").Value == "Access"
										 select e;
	foreach(var ele in xeles_element_access)
    {
		List<string> list_target;
		if (mmap_element_access.TryGetValue(ele.Attribute("source").Value, out list_target))
        {
            list_target.Add(ele.Attribute("target").Value);
        }
        else
        {
            list_target = new List<string>();
            list_target.Add(ele.Attribute("target").Value);
            mmap_element_access[ele.Attribute("source").Value] = list_target;
        }
    }

	// Make the map of specialzation-relationship
	IEnumerable<XElement> xeles_specialization = from e in doc.Descendants(NP + "relationship")
												 where e.Attribute(xmlns_xsi + "type").Value == "Specialization"
												 select e;
	foreach(var ele in xeles_specialization)
    {
		string id_child = ele.Attribute("source").Value;
		string id_parent = ele.Attribute("target").Value;

		Element element_child = dict_element[id_child];
		Element element_parent = dict_element[id_parent];

		List<string> list_parent = new List<string>();

		if (!mmap_specialization.ContainsKey(id_child))
		{
			list_parent.Add(id_parent);
			mmap_specialization.Add(id_child,list_parent);
		}
		else 
		{
			mmap_specialization[id_child].Add(id_parent);
		}
    }

	IEnumerable<XElement> xeles_implementation = from e in doc.Descendants(NP + "relationship")
												 where e.Attribute(xmlns_xsi + "type").Value == "Association"
												 select e;
	foreach(var ele in xeles_implementation)
    {
		string id_source = ele.Attribute("source").Value;
		string id_target = ele.Attribute("target").Value;

		if(dict_element.Keys.Contains(id_source)&&dict_element.Keys.Contains(id_target))
		{
			Element element_source = dict_element[id_source];
			Element element_target = dict_element[id_target];

			List<string> list_parent = new List<string>();
		
			if(element_source.Type_.Equals("ApplicationInterface")&&(!element_target.Type_.Equals("ApplicationInterface")))
			{
				if (!mmap_specialization.ContainsKey(id_target))
				{
					list_parent.Add(id_source);
					mmap_specialization.Add(id_target,list_parent);
				}
				else 
				{
					mmap_specialization[id_target].Add(id_source);
				}
			}
			else if((!element_source.Type_.Equals("ApplicationInterface"))&&element_target.Type_.Equals("ApplicationInterface"))
			{
				if (!mmap_specialization.ContainsKey(id_source))
				{
					list_parent.Add(id_target);
					mmap_specialization.Add(id_source,list_parent);
				}
				else 
				{
					mmap_specialization[id_source].Add(id_target);
				}
			}
		}
    }

	foreach(var id in list_element)
	{
		switch(dict_element[id].Type_)
		{
			case "BusinessObject": addImplementation(ref mmap_specialization, id, "IBusinessObject");break;
			case "Representation": addImplementation(ref mmap_specialization, id, "I"+StringHelper.UpperString(dict_element[id].Class_name_));break;
			case "Contract": addImplementation(ref mmap_specialization, id, "CContract");break;
			case "ApplicationEvent": addImplementation(ref mmap_specialization, id, "EventArgs");break;
			case "ApplicationComponent": addImplementation(ref mmap_specialization, id, "Component");break;
			case "DataObject": addImplementation(ref mmap_specialization, id, "DAO");break;
			case "ApplicationProcess": addImplementation(ref mmap_specialization, id, "UseCaseWorkflow");break;
			case "ApplicationService": addImplementation(ref mmap_specialization, id, "UseCaseWorkflow");break;
			defaut:break;
		}
	}

	// Make the multimap of association-relationship
	IEnumerable<XElement> xeles_association = from e in doc.Descendants(NP + "relationship")
											  where e.Attribute(xmlns_xsi + "type").Value == "Association"
											  select e;
	foreach(var ele in xeles_association)
    {
		List<string> list_target;
		List<string> list_target2;
		if (mmap_association.TryGetValue(ele.Attribute("source").Value, out list_target))
        {
            list_target.Add(ele.Attribute("target").Value);
        }
        else
        {
            list_target = new List<string>();
            list_target.Add(ele.Attribute("target").Value);
            mmap_association[ele.Attribute("source").Value] = list_target;
        }
		if (mmap_association.TryGetValue(ele.Attribute("target").Value, out list_target))
        {
            list_target.Add(ele.Attribute("source").Value);
        }
        else
        {
            list_target2 = new List<string>();
            list_target2.Add(ele.Attribute("source").Value);
            mmap_association[ele.Attribute("target").Value] = list_target2;
        }
    }

            
            #line default
            #line hidden
            this.Write("\r\nusing System.Collections.Generic;\r\n\r\n");
            
            #line 588 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	// Generate used namespaces
	foreach(var id_group in mmap_group_access.Keys)
	{
		foreach(var id in mmap_group_access[id_group])
		{

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 595 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dict_group_name[id]));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 596 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		}
	}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 601 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	// Generate classes from group
	foreach(var id_group in list_group_new)
	{
		List<string> list_idElement = dict_group[id_group]["class"];
		List<string> list_idInterface = dict_group[id_group]["interface"];

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 608 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dict_group_name[id_group]));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 610 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		foreach(var id_interface in list_idInterface)
		{
			if(list_element.Contains(id_interface))
			{
				Element ele_interface = dict_element[id_interface]; 
				string class_name = ele_interface.Class_name_;
				
				if(mmap_relationship.ContainsKey(id_interface))
				{
					List<string> list_realization;
					if(mmap_relationship[id_interface]["source"].TryGetValue("Realization", out list_realization))
					{
						foreach(var i in list_realization)
						{
							Element element_associated = dict_element[i];
							if (element_associated.Type_.Equals("BusinessInterface")||element_associated.Type_.Equals("Requirement")||element_associated.Type_.Equals("AplicationService"))
							{

            
            #line default
            #line hidden
            this.Write("\tReferenceModel(");
            
            #line 629 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 629 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 630 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}
					
					List<string> list_access;
					if(mmap_relationship[id_interface]["source"].TryGetValue("Access", out list_access))
					{
						foreach(var i in list_access)
						{
							Element element_associated = dict_element[i];
							if (element_associated.Type_.Equals("Contrat"))
							{
								

            
            #line default
            #line hidden
            this.Write("\t[Contract(\"");
            
            #line 645 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\",\"");
            
            #line 645 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Class_name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 646 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}
				}

				if (!mmap_specialization.Keys.Contains(id_interface))
				{

            
            #line default
            #line hidden
            this.Write("\tpublic interface ");
            
            #line 655 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n\t}\r\n\r\n");
            
            #line 659 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
				}
				else
				{
					List<string> list_parent_name = new List<string>();
					foreach(var e in mmap_specialization[id_interface])
						list_parent_name.Add(dict_element[e].Class_name_);
					string str_parents = String.Join(", ", list_parent_name.Select(i => StringHelper.UpperString(i.ToString())).ToArray());

            
            #line default
            #line hidden
            this.Write("\tpublic interface ");
            
            #line 668 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 668 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str_parents));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\t}\r\n\r\n");
            
            #line 672 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				}
			}
		}

		foreach(var id_element in list_idElement)
		{
			Element ele = dict_element[id_element]; 
			string class_name = ele.Class_name_;

			// Generate representation
			if(ele.Type_.Equals("Representation"))
			{

            
            #line default
            #line hidden
            this.Write("\tpublic interface I");
            
            #line 686 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write("{}\r\n");
            
            #line 687 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				if (mmap_relationship.ContainsKey(id_element))
				{
					List<string> list_associated;
					if (mmap_relationship[id_element]["source"].TryGetValue("Realieation", out list_associated))
					{
						foreach(var id_associated in list_associated)
						{
							Element element_associated = dict_element[id_associated];
							if(element_associated.Type_.Equals("AppllicationProcess"))
							{

            
            #line default
            #line hidden
            this.Write("\t\t[ReferenceModel(");
            
            #line 699 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, ");
            
            #line 699 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write(")]\r\n");
            
            #line 700 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}
				}

				if (!mmap_specialization.Keys.Contains(id_element))
				{

            
            #line default
            #line hidden
            this.Write("\t[Model(\"");
            
            #line 709 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(class_name));
            
            #line default
            #line hidden
            this.Write("\", ElementType = \"");
            
            #line 709 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate\")]\r\n\tpartial class ");
            
            #line 710 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n");
            
            #line 712 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
				}
				else
				{
					List<string> list_parent_name = new List<string>();
					foreach(var e in mmap_specialization[id_element])
					{
						if(e.Contains("id"))
							list_parent_name.Add(dict_element[e].Class_name_);
						else
							list_parent_name.Add(e);
					}
					string str_parents = String.Join(", ", list_parent_name.Select(i => StringHelper.UpperString(i.ToString())).ToArray());
						

            
            #line default
            #line hidden
            this.Write("\r\n\t[Model(\"");
            
            #line 728 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(class_name));
            
            #line default
            #line hidden
            this.Write("\", ElementType = \"");
            
            #line 728 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate\")]\r\n\tpartial class ");
            
            #line 729 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 729 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str_parents));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 731 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				}

				// Generate all properties
				foreach(var p in ele.Properties_.Keys)
				{
					if (p!="Implementation")
					{

            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t");
            
            #line 740 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Properties_[p]));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 740 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 741 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					}
				}

				// Generate representation constructor 

				string className = "";
				string typeName = "";
				string varName = "";
				IEnumerable<XElement> xele_process = from e in doc.Descendants(NP + "relationship")
														where e.Attribute(xmlns_xsi + "type").Value == "Access" &&
															e.Attribute("target").Value.Equals(ele.Identifier_) &&
															dict_element[e.Attribute("source").Value].Type_.Equals("ApplicationProcess")
														select e;
				foreach(var xp in xele_process)
				{
					className = dict_element[xp.Attribute("source").Value].Class_name_;
					typeName = StringHelper.UpperString(className);
					varName = xp.Element(NP + "properties") == null ? StringHelper.LowerString(className) : xp.Descendants(NP + "value").First().Value;

            
            #line default
            #line hidden
            this.Write("\t\tI");
            
            #line 761 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 761 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 762 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				}

            
            #line default
            #line hidden
            this.Write("\t\tpublic\t");
            
            #line 765 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write("(IWorkflow caller)\r\n\t\t{\r\n\t\t\t");
            
            #line 767 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(" = caller as ");
            
            #line 767 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t}\r\n");
            
            #line 769 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				// Generate référence d'une classe.
				if( mmap_association.ContainsKey(id_element))
				{
					foreach(var id_associated in mmap_association[id_element])
					{
						Element element_associated = dict_element[id_associated];
						if(element_associated.Equals("BuisinessObject") || 
						   element_associated.Equals("ApplicationInterface"))
						{
							Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
							string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 782 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 782 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 784 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

						}
					}
				}

				if (mmap_relationship.ContainsKey(id_element))
				{
					List<string> list_associated;
					if (mmap_relationship[id_element]["source"].TryGetValue("Access", out list_associated))
					{
						foreach(var id_associated in list_associated)
						{
							Element element_associated = dict_element[id_associated];
							if(element_associated.Type_.Equals("AppllicationProcess"))
							{
								Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
								string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 802 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 802 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 804 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}
				}

				// Generate aggregation relationship.
				if( mmap_relationship.ContainsKey(id_element) && 
					mmap_relationship[id_element].ContainsKey("source") && 
					mmap_relationship[id_element]["source"].ContainsKey("Aggregation") )
				{
					foreach (var idTarget in mmap_relationship[id_element]["source"]["Aggregation"])
					{
						Element elementTarget = dict_element[idTarget];
						if (class_types.Contains(elementTarget.Type_))
						{
							if (((groups==null||groups.Length==0)&&(views==null||views.Length==0))||isInSelectedGroups(idTarget,dict_group)||isInSelectedViews(idTarget,dict_view))
							{
								Tuple<string, string> tuple =  new Tuple<string, string>(id_element,idTarget);
								string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(elementTarget.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\tList<");
            
            #line 825 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Class_name_)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 825 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n");
            
            #line 826 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}
				}

				// Generate association relationship.
				if(mmap_association.Keys.Contains(id_element))
				{
					foreach (var idTarget in mmap_association[id_element])
					{
						Element elementTarget = dict_element[idTarget];
						if (class_types.Contains(elementTarget.Type_)||elementTarget.Type_.Equals("ApplicationInterface"))
						{
							if (((groups==null||groups.Length==0)&&(views==null||views.Length==0))||isInSelectedGroups(idTarget,dict_group)||isInSelectedViews(idTarget,dict_view))
							{
								Tuple<string, string> tuple =  new Tuple<string, string>(id_element,idTarget);
								string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(elementTarget.Class_name_);
								if(elementTarget.Type_.Equals("ApplicationInterface"))
								{
									foreach(var j in dict_related_element[idTarget])
									{
										if (dict_element.ContainsKey(j))
										{
											if (dict_element[j].Type_.Equals("BusinessInterface")) 
											{

            
            #line default
            #line hidden
            this.Write("\t\t[reference(\"");
            
            #line 853 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dict_element[j].Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 854 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
											}
										}
									}
								}

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 860 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 860 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 862 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}
				}

				// Generate access relationship.
				if(mmap_element_access.ContainsKey(id_element))
				{
					foreach (var idTarget in mmap_element_access[id_element])
					{
						Element elementTarget = dict_element[idTarget];
						if (class_types.Contains(elementTarget.Type_))
						{
							if (((groups==null||groups.Length==0)&&(views==null||views.Length==0))||isInSelectedGroups(idTarget,dict_group)||isInSelectedViews(idTarget,dict_view))
							{
								string type_name = elementTarget.Type_.Equals("Representation")||elementTarget.Type_.Equals("ApplicationProcess") ? 
												"I"+elementTarget.Class_name_ : elementTarget.Class_name_;
								Tuple<string, string> tuple =  new Tuple<string, string>(id_element,idTarget);
								string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(elementTarget.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 883 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(type_name)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 883 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 885 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}
				}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 893 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

			}
		}

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 899 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	}

            
            #line default
            #line hidden
            this.Write("\r\n<Log> \r\n");
            
            #line 904 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	if (errors.Count()>0)
	{

            
            #line default
            #line hidden
            this.Write("\t<Errors>\r\n");
            
            #line 909 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		foreach(string err in errors)
		{

            
            #line default
            #line hidden
            this.Write("\t\t<Error> ");
            
            #line 913 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(err));
            
            #line default
            #line hidden
            this.Write(" </Error>\r\n");
            
            #line 914 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		}

            
            #line default
            #line hidden
            this.Write("\t</Errors>\r\n");
            
            #line 918 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	}

            
            #line default
            #line hidden
            this.Write("</Log>\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 923 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	private bool isInSelectedGroups(string id, Dictionary<string, Dictionary<string,List<string>>> dict_group)
	{
		foreach(var g in dict_group.Keys)
		{
			foreach(var sg in dict_group[g].Keys)
				if(dict_group[g][sg].Contains(id))
					return true;
		}
		return false;
	}

	private bool isInSelectedViews(string id, Dictionary<string, List<string>> dict_view)
	{
		foreach(var v in dict_view.Keys)
		{
			if(dict_view[v].Contains(id))
				return true;
		}
		return false;
	}

	private void findAllElement(Dictionary<string, Element> dict_element, XNamespace xmlns_xsi, XNamespace NP, XElement root, XElement node, ref List<string> list, ref List<string> list_group)
	{
		IEnumerable<XElement> xeles_node = from e in node.Descendants(NP + "node")
										   select e;
		foreach(var n in xeles_node)
		{
			if(n.Attribute(xmlns_xsi + "type").Value=="Element")
			{
				string id = n.Attribute("elementRef").Value;
				if(!dict_element[id].Type_.Equals("Grouping"))
					list.Add(n.Attribute("elementRef").Value);
				else
					list_group.Add(n.Attribute("elementRef").Value);
			}
			else if(n.Attribute(xmlns_xsi + "type").Value=="Label" && n.Element(NP + "viewRef")!=null)
			{
				XElement container = root.Descendants(NP + "view").FirstOrDefault(el => el.Attribute("identifier").Value == n.Element(NP + "viewRef").Attribute("ref").Value);
				if (container != null )
					findAllElement(dict_element, xmlns_xsi, NP, root, container, ref list, ref list_group);
			}
			else if(n.Attribute(xmlns_xsi + "type").Value=="Container")
			{
				findAllElement(dict_element, xmlns_xsi, NP, root, n, ref list, ref list_group);
			}
		}
	}

	private void addImplementation(ref Dictionary<string, List<string>> mmap_specialization, string id_child, string parent)
	{
		if (!mmap_specialization.ContainsKey(id_child))
		{
			List<string> list_parent = new List<string>();
			list_parent.Add(parent);
			mmap_specialization.Add(id_child,list_parent);
		}
		else 
		{
			mmap_specialization[id_child].Add(parent);
		}
	}

        
        #line default
        #line hidden
        
        #line 7 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Element.ttinclude"

	public class Element
	{
		public string Identifier_ { get; set; }
		public string Type_ { get; set; }
		public string Name_ { get; set; }
		public string Documentation_ { get; set; }
		public Dictionary<string, string> Properties_ { get; set; }
		public string Class_name_ { get; set; }

		public Element()
		{
		}

		public Element(string identifier_, string type_, string name_, string documentation_="", Dictionary<string, string> properties_=null)
		{
			this.Identifier_ = identifier_;
			this.Type_ = type_;
			this.Name_ = name_;
			this.Class_name_ = name_;
			this.Documentation_ = documentation_;
			this.Properties_ = (properties_==null)? new Dictionary<string, string>() : properties_;
		}
		
		/*
		public override string ToString()
		{
			string s;
			s = "identifier: " + this.Identifier_ + "\r\nname: " + this.Name_ + "\r\ntype: " + this.Type_ + "\r\ndocumentation: " + this.Documentation_ + "\r\nproperties: ";
			if (this.Properties_ != null)
			{
				int i = 0;
				foreach (Property p in this.Properties_)
				{
					if (i != 0)
						s += "            ";
					s += p.name + " - " + p.value + "\r\n";
					i++;
				}
			}
			return s;
		}
		*/
	}

	public struct Property
	{
		public string name;
		public string value;
	}

        
        #line default
        #line hidden
        
        #line 11 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\StringHelper.ttinclude"

	class StringHelper {
	
		// Method for creating the class name, deleting the spaces, special characters and uppercasing the string
		public static string UpperString(string name)
		{
			//name = Regex.Replace(name, @"\s\(.*\)", "");
			name = name.Replace(' ','_');
			name = name.Replace('.','_');
			name = Regex.Replace(name, @"[^\w\.@_]", "");
			return name[0].ToString().ToUpperInvariant() + name.Substring(1);
		}

		// Method for creating the object name, deleting the spaces, special characters and lowercasing the string
		public static string LowerString(string name)
		{
			//name = Regex.Replace(name, @"\s\(.*\)", "");
			name = name.Replace(' ','_');
			name = name.Replace('.','_');
			name = Regex.Replace(name, @"[^\w\.@_]", "");
			return name[0].ToString().ToLowerInvariant() + name.Substring(1);
		}

		// Method to delete line feed characters like \r, \n 
		public static string DocumentationTraitement(string document)
		{
			document = document.Replace("&#xD;","");
			document = document.Replace("\r"," ");
			document = document.Replace("\n"," ");
			document = document.Replace("\t"," ");
			document = Regex.Replace(document, "\\s{2,}", " ");
			document = document.Replace("\"","\\\"");
			return document;
		}
	}

        
        #line default
        #line hidden
        
        #line 1 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

private string _input_nameField;

/// <summary>
/// Access the input_name parameter of the template.
/// </summary>
private string input_name
{
    get
    {
        return this._input_nameField;
    }
}

private string[] _typesField;

/// <summary>
/// Access the types parameter of the template.
/// </summary>
private string[] types
{
    get
    {
        return this._typesField;
    }
}

private string[] _groupsField;

/// <summary>
/// Access the groups parameter of the template.
/// </summary>
private string[] groups
{
    get
    {
        return this._groupsField;
    }
}

private string[] _viewsField;

/// <summary>
/// Access the views parameter of the template.
/// </summary>
private string[] views
{
    get
    {
        return this._viewsField;
    }
}

private string _name_spaceField;

/// <summary>
/// Access the name_space parameter of the template.
/// </summary>
private string name_space
{
    get
    {
        return this._name_spaceField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool input_nameValueAcquired = false;
if (this.Session.ContainsKey("input_name"))
{
    this._input_nameField = ((string)(this.Session["input_name"]));
    input_nameValueAcquired = true;
}
if ((input_nameValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "input_name");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._input_nameField = ((string)(tc.ConvertFrom(parameterValue)));
            input_nameValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'input_name\' did not match the type of " +
                    "the data passed to the template.");
        }
    }
}
if ((input_nameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("input_name");
    if ((data != null))
    {
        this._input_nameField = ((string)(data));
    }
}
bool typesValueAcquired = false;
if (this.Session.ContainsKey("types"))
{
    this._typesField = ((string[])(this.Session["types"]));
    typesValueAcquired = true;
}
if ((typesValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "types");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string[]));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._typesField = ((string[])(tc.ConvertFrom(parameterValue)));
            typesValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String[]\' of the parameter \'types\' did not match the type of the" +
                    " data passed to the template.");
        }
    }
}
if ((typesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("types");
    if ((data != null))
    {
        this._typesField = ((string[])(data));
    }
}
bool groupsValueAcquired = false;
if (this.Session.ContainsKey("groups"))
{
    this._groupsField = ((string[])(this.Session["groups"]));
    groupsValueAcquired = true;
}
if ((groupsValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "groups");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string[]));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._groupsField = ((string[])(tc.ConvertFrom(parameterValue)));
            groupsValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String[]\' of the parameter \'groups\' did not match the type of th" +
                    "e data passed to the template.");
        }
    }
}
if ((groupsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("groups");
    if ((data != null))
    {
        this._groupsField = ((string[])(data));
    }
}
bool viewsValueAcquired = false;
if (this.Session.ContainsKey("views"))
{
    this._viewsField = ((string[])(this.Session["views"]));
    viewsValueAcquired = true;
}
if ((viewsValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "views");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string[]));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._viewsField = ((string[])(tc.ConvertFrom(parameterValue)));
            viewsValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String[]\' of the parameter \'views\' did not match the type of the" +
                    " data passed to the template.");
        }
    }
}
if ((viewsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("views");
    if ((data != null))
    {
        this._viewsField = ((string[])(data));
    }
}
bool name_spaceValueAcquired = false;
if (this.Session.ContainsKey("name_space"))
{
    this._name_spaceField = ((string)(this.Session["name_space"]));
    name_spaceValueAcquired = true;
}
if ((name_spaceValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "name_space");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._name_spaceField = ((string)(tc.ConvertFrom(parameterValue)));
            name_spaceValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'name_space\' did not match the type of " +
                    "the data passed to the template.");
        }
    }
}
if ((name_spaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("name_space");
    if ((data != null))
    {
        this._name_spaceField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class GeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
