// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FichierGenerator.Template
{
    using System;
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    using System.Text;
    using System.Text.RegularExpressions;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Generator : GeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\nusing System.Collections.Generic;\r\n\r\nnamespace MyProject\r\n{\r\n");
            
            #line 23 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
	// Open the prototype document.
	XElement doc = XElement.Load(input_name);

	// Get the nampespaces 
	XNamespace NP = doc.GetDefaultNamespace();
    XNamespace xmlns_xsi = "http://www.w3.org/2001/XMLSchema-instance";

	// Map group_name - list_id_elements
	Dictionary<string, List<string>> dict_group = new Dictionary<string, List<string>>();
	
	// Map identifier - element
	Dictionary<string, Element> dict_element = new Dictionary<string, Element>();

	// MultiMap of composition
	Dictionary<string, List<string>> mmap_compostion = new Dictionary<string, List<string>>();

	// MultiMap of aggregation
	Dictionary<string, List<string>> mmap_aggregation = new Dictionary<string, List<string>>();

	// Map of specialization
	Dictionary<string, string> dict_specialization = new Dictionary<string, string>();

	// MultiMap of association
	Dictionary<string, List<string>> mmap_association = new Dictionary<string, List<string>>();

	// List of errors
	List<string> errors = new List<string>();

	// List of class created
	List<string> classes = new List<string>();
	
	// Make the map of groups
	if (groups!=null&&!groups.Equals(""))
	{
		IEnumerable<XElement> xeles_group = from e in doc.Descendants(NP + "element")
											where (e.Attribute(xmlns_xsi + "type").Value == "Grouping")&&(groups.Contains(e.Element(NP+"name").Value))
											select e;
		foreach(var ele in xeles_group)
		{
			List<string> list_target = new List<string>();
			IEnumerable<XElement> xeles_target = from e in doc.Descendants(NP + "relationship")
												 where e.Attribute("source").Value == ele.Attribute("identifier").Value
												 select e;
			if (xeles_target!=null&&xeles_target.Count()!=0)
			{
				foreach(var eg in xeles_target)
				{
					list_target.Add(eg.Attribute("target").Value);
				}
				dict_group.Add(ele.Attribute("identifier").Value,list_target);
			}
			
		}
	}

	// Make the map of id - element
	foreach(var ele in doc.Descendants(NP + "element"))
    {
		Element element = new Element();
		element.Identifier_ = ele.Attribute("identifier").Value;
		element.Name_ = (ele.Element(NP + "name") != null) ? ele.Element(NP + "name").Value : "";
		element.Documentation_ = (ele.Element(NP + "documentation") != null) ? ele.Element(NP + "documentation").Value : "";	
		element.Type_ = ele.Attribute(xmlns_xsi + "type").Value;	
		dict_element.Add(element.Identifier_, element);
    }
	
	// Make the multimap of compostion-relationship
	IEnumerable<XElement> xeles_compostion = from e in doc.Descendants(NP + "relationship")
											 where e.Attribute(xmlns_xsi + "type").Value == "Composition"
											 select e;
	foreach(var ele in xeles_compostion)
    {
		List<string> list_target;
		if (mmap_compostion.TryGetValue(ele.Attribute("source").Value, out list_target))
        {
            list_target.Add(ele.Attribute("target").Value);
        }
        else
        {
            list_target = new List<string>();
            list_target.Add(ele.Attribute("target").Value);
            mmap_compostion[ele.Attribute("source").Value] = list_target;
        }
		//mmap_compostion.Add(ele.Attribute("source").Value,ele.Attribute("target").Value);
    }

	// Make the map of specialzation-relationship
	IEnumerable<XElement> xeles_specialization = from e in doc.Descendants(NP + "relationship")
												 where e.Attribute(xmlns_xsi + "type").Value == "Specialization"
												 select e;
	foreach(var ele in xeles_specialization)
    {
		string id_child = ele.Attribute("source").Value;
		string id_parent = ele.Attribute("target").Value;
		Element element_child = dict_element[id_child];
		if (!dict_specialization.ContainsKey(id_child))
			dict_specialization.Add(id_child,id_parent);
		else 
			errors.Add("Class "+element_child.Name_+" has more than one parent class, only the first was considered");
    }

	// Make the multimap of aggregation-relationship
	IEnumerable<XElement> xeles_aggregation = from e in doc.Descendants(NP + "relationship")
											  where e.Attribute(xmlns_xsi + "type").Value == "Aggregation"
											  select e;
	foreach(var ele in xeles_aggregation)
    {
		List<string> list_target;
		if (mmap_aggregation.TryGetValue(ele.Attribute("source").Value, out list_target))
        {
            list_target.Add(ele.Attribute("target").Value);
        }
        else
        {
            list_target = new List<string>();
            list_target.Add(ele.Attribute("target").Value);
            mmap_aggregation[ele.Attribute("source").Value] = list_target;
        }
    }

	// Make the multimap of association-relationship
	IEnumerable<XElement> xeles_association = from e in doc.Descendants(NP + "relationship")
											  where e.Attribute(xmlns_xsi + "type").Value == "Association"
											  select e;
	foreach(var ele in xeles_association)
    {
		List<string> list_target;
		if (mmap_association.TryGetValue(ele.Attribute("source").Value, out list_target))
        {
            list_target.Add(ele.Attribute("target").Value);
        }
        else
        {
            list_target = new List<string>();
            list_target.Add(ele.Attribute("target").Value);
            mmap_association[ele.Attribute("source").Value] = list_target;
        }
    }

	// Generate classes 
	// Get all the Xelements 
	IEnumerable<XElement> xelements = from e in doc.Descendants(NP + "element")
									  where types.Contains(e.Attribute(xmlns_xsi + "type").Value) 
									  select e;
	foreach(var xele in xelements)
	{
		Element ele; 
		string class_name;
		if (groups==null||groups.Equals("")||isInSelectedGroups(xele.Attribute("identifier").Value,dict_group))
		{
			classes.Add(xele.Attribute("identifier").Value);
			ele = dict_element[xele.Attribute("identifier").Value];
			class_name = xele.Element(NP + "name").Value;

            
            #line default
            #line hidden
            this.Write("\t[ModelElement(\"");
            
            #line 178 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(class_name));
            
            #line default
            #line hidden
            this.Write("\",\"");
            
            #line 178 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.DocumentationTraitement(ele.Documentation_)));
            
            #line default
            #line hidden
            this.Write(", ElementType = \"");
            
            #line 178 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate\")]\r\n\tpartial class ");
            
            #line 179 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" {}\r\n");
            
            #line 180 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		}
	}

	// Generate composition relationship.

            
            #line default
            #line hidden
            this.Write("\t// Composition relationship\r\n\r\n");
            
            #line 188 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	foreach (var idSource in mmap_compostion.Keys)
	{
		Element elementSource = dict_element[idSource];
		if(classes.Contains(elementSource.Identifier_))
		{

            
            #line default
            #line hidden
            this.Write("\t[ModelElement(\"");
            
            #line 195 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementSource.Name_));
            
            #line default
            #line hidden
            this.Write("\",\"");
            
            #line 195 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.DocumentationTraitement(elementSource.Documentation_)));
            
            #line default
            #line hidden
            this.Write(", ElementType = \"");
            
            #line 195 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementSource.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate\")]\r\n    partial class ");
            
            #line 196 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementSource.Name_)));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 198 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		//list_class_created.Add(elementSource.Identifier_);
		foreach (var idTarget in mmap_compostion[elementSource.Identifier_])
		{
			Element elementTarget = dict_element[idTarget];
			if(classes.Contains(elementTarget.Identifier_))
			{

            
            #line default
            #line hidden
            this.Write("\t\tList<");
            
            #line 206 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 206 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.LowerString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_ = \r\n\t\t\tnew List<");
            
            #line 207 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write(">();\r\n\t\tpublic List<");
            
            #line 208 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 208 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_ { get => ");
            
            #line 208 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.LowerString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_; set => ");
            
            #line 208 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.LowerString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_ = value; }\r\n\r\n");
            
            #line 210 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

			}
		}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 216 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
		
	}
}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 221 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	// Generate specialization relationship.

            
            #line default
            #line hidden
            this.Write("\t// Specialization relationship\r\n\r\n");
            
            #line 226 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	foreach (var idChild in dict_specialization.Keys)
	{
		Element elementChild = dict_element[idChild];
		Element elementParent = dict_element[dict_specialization[idChild]];
		//if(elementChild.Type_.Equals("BusinessObject")&&elementParent.Type_.Equals("BusinessObject"))
		//{
		if(classes.Contains(elementChild.Identifier_)&&classes.Contains(elementParent.Identifier_))
		{

            
            #line default
            #line hidden
            this.Write("\t[ModelElement(\"");
            
            #line 236 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementChild.Name_));
            
            #line default
            #line hidden
            this.Write("\",\"");
            
            #line 236 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.DocumentationTraitement(elementChild.Documentation_)));
            
            #line default
            #line hidden
            this.Write(", ElementType = \"");
            
            #line 236 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementChild.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate\")]\r\n\tpartial class ");
            
            #line 237 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementChild.Name_)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 237 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementParent.Name_)));
            
            #line default
            #line hidden
            this.Write(" {}\r\n");
            
            #line 238 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		}
	}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 243 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	// Generate aggregation relationship.

            
            #line default
            #line hidden
            this.Write("\t// Aggregation relationship\r\n\r\n");
            
            #line 248 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	foreach (var idSource in mmap_aggregation.Keys)
	{
		Element elementSource = dict_element[idSource];
		if(classes.Contains(elementSource.Identifier_))
		{

            
            #line default
            #line hidden
            this.Write("\t[ModelElement(\"");
            
            #line 255 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementSource.Name_));
            
            #line default
            #line hidden
            this.Write("\",\"");
            
            #line 255 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.DocumentationTraitement(elementSource.Documentation_)));
            
            #line default
            #line hidden
            this.Write(", ElementType = \"");
            
            #line 255 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementSource.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate\")]\r\n    partial class ");
            
            #line 256 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementSource.Name_)));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 258 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		//list_class_created.Add(elementSource.Identifier_);
		foreach (var idTarget in mmap_aggregation[idSource])
		{
			Element elementTarget = dict_element[idTarget];
			if(classes.Contains(elementTarget.Identifier_))
			{

            
            #line default
            #line hidden
            this.Write("\t\tList<");
            
            #line 266 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 266 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.LowerString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\t\tpublic List<");
            
            #line 267 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 267 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_ { get => ");
            
            #line 267 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.LowerString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_; set => ");
            
            #line 267 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.LowerString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_ = value; }\r\n\r\n");
            
            #line 269 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

			}
		}

            
            #line default
            #line hidden
            this.Write("\t}\r\n");
            
            #line 274 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
		
	}
}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 279 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	// Generate association relationship.

            
            #line default
            #line hidden
            this.Write("\t// Association relationship\r\n\r\n");
            
            #line 284 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	foreach (var idSource in mmap_association.Keys)
	{
		Element elementSource = dict_element[idSource];
		if(classes.Contains(elementSource.Identifier_))
		{

            
            #line default
            #line hidden
            this.Write("\t[ModelElement(\"");
            
            #line 291 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementSource.Name_));
            
            #line default
            #line hidden
            this.Write("\",\"");
            
            #line 291 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.DocumentationTraitement(elementSource.Documentation_)));
            
            #line default
            #line hidden
            this.Write(", ElementType = \"");
            
            #line 291 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(elementSource.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate\")]\r\n    partial class ");
            
            #line 292 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementSource.Name_)));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 294 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		//list_class_created.Add(elementSource.Identifier_);
		foreach (var idTarget in mmap_association[idSource])
		{
			Element elementTarget = dict_element[idTarget];
			if(classes.Contains(elementTarget.Identifier_))
			{

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 302 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 302 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.LowerString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\t\tpublic ");
            
            #line 303 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 303 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_ { get => ");
            
            #line 303 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.LowerString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_; set => ");
            
            #line 303 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.LowerString(elementTarget.Name_)));
            
            #line default
            #line hidden
            this.Write("_ = value; }\r\n\r\n");
            
            #line 305 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

			}
		}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 311 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
		
	}
}

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n<Log> \r\n");
            
            #line 318 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	if (errors.Count()>0)
	{

            
            #line default
            #line hidden
            this.Write("\t<Errors>\r\n");
            
            #line 323 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		foreach(string err in errors)
		{

            
            #line default
            #line hidden
            this.Write("\t\t<Error> ");
            
            #line 327 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(err));
            
            #line default
            #line hidden
            this.Write(" </Error>\r\n");
            
            #line 328 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		}

            
            #line default
            #line hidden
            this.Write("\t</Errors>\r\n");
            
            #line 332 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	}

            
            #line default
            #line hidden
            this.Write("</Log>\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 337 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	private bool isInSelectedGroups(string id, Dictionary<string, List<string>> dict_group)
	{
		foreach(var g in dict_group.Keys)
		{
			if(dict_group[g].Contains(id))
				return true;
		}
		return false;
	}

        
        #line default
        #line hidden
        
        #line 7 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Element.ttinclude"

	public class Element
	{
		public string Identifier_ { get; set; }
		public string Type_ { get; set; }
		public string Name_ { get; set; }
		public string Documentation_ { get; set; }
		public List<Property> Properties_ { get; set; }

		public Element()
		{
		}

		public Element(string identifier_, string type_, string name_, string documentation_="", List<Property> properties_=null)
		{
			this.Identifier_ = identifier_;
			this.Type_ = type_;
			this.Name_ = name_;
			this.Documentation_ = documentation_;
			this.Properties_ = (properties_==null)? new List<Property>() : properties_;
		}

		public override string ToString()
		{
			string s;
			s = "identifier: " + this.Identifier_ + "\r\nname: " + this.Name_ + "\r\ntype: " + this.Type_ + "\r\ndocumentation: " + this.Documentation_ + "\r\nproperties: ";
			if (this.Properties_ != null)
			{
				int i = 0;
				foreach (Property p in this.Properties_)
				{
					if (i != 0)
						s += "            ";
					s += p.name + " - " + p.value + "\r\n";
					i++;
				}
			}
			return s;
		}
	}

	public struct Property
	{
		public string name;
		public string value;
	}

        
        #line default
        #line hidden
        
        #line 11 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\StringHelper.ttinclude"

	class StringHelper {
	
		// Method for creating the class name, deleting the spaces, special characters and uppercasing the string
		public static string UpperString(string name)
		{
			//name = Regex.Replace(name, @"\s\(.*\)", "");
			name = name.Replace(' ','_');
			name = name.Replace('.','_');
			name = Regex.Replace(name, @"[^\w\.@_]", "");
			return name[0].ToString().ToUpperInvariant() + name.Substring(1);
		}

		// Method for creating the object name, deleting the spaces, special characters and lowercasing the string
		public static string LowerString(string name)
		{
			//name = Regex.Replace(name, @"\s\(.*\)", "");
			name = name.Replace(' ','_');
			name = name.Replace('.','_');
			name = Regex.Replace(name, @"[^\w\.@_]", "");
			return name[0].ToString().ToLowerInvariant() + name.Substring(1);
		}

		// Method to delete line feed characters like \r, \n 
		public static string DocumentationTraitement(string document)
		{
			document = document.Replace("&#xD;","");
			document = document.Replace("\r"," ");
			document = document.Replace("\n"," ");
			document = document.Replace("\t"," ");
			document = Regex.Replace(document, "\\s{2,}", " ");
			document = document.Replace("\"","\\\"");
			return document;
		}
	}

        
        #line default
        #line hidden
        
        #line 1 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

private string _input_nameField;

/// <summary>
/// Access the input_name parameter of the template.
/// </summary>
private string input_name
{
    get
    {
        return this._input_nameField;
    }
}

private string[] _typesField;

/// <summary>
/// Access the types parameter of the template.
/// </summary>
private string[] types
{
    get
    {
        return this._typesField;
    }
}

private string[] _groupsField;

/// <summary>
/// Access the groups parameter of the template.
/// </summary>
private string[] groups
{
    get
    {
        return this._groupsField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool input_nameValueAcquired = false;
if (this.Session.ContainsKey("input_name"))
{
    this._input_nameField = ((string)(this.Session["input_name"]));
    input_nameValueAcquired = true;
}
if ((input_nameValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "input_name");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._input_nameField = ((string)(tc.ConvertFrom(parameterValue)));
            input_nameValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'input_name\' did not match the type of " +
                    "the data passed to the template.");
        }
    }
}
if ((input_nameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("input_name");
    if ((data != null))
    {
        this._input_nameField = ((string)(data));
    }
}
bool typesValueAcquired = false;
if (this.Session.ContainsKey("types"))
{
    this._typesField = ((string[])(this.Session["types"]));
    typesValueAcquired = true;
}
if ((typesValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "types");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string[]));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._typesField = ((string[])(tc.ConvertFrom(parameterValue)));
            typesValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String[]\' of the parameter \'types\' did not match the type of the" +
                    " data passed to the template.");
        }
    }
}
if ((typesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("types");
    if ((data != null))
    {
        this._typesField = ((string[])(data));
    }
}
bool groupsValueAcquired = false;
if (this.Session.ContainsKey("groups"))
{
    this._groupsField = ((string[])(this.Session["groups"]));
    groupsValueAcquired = true;
}
if ((groupsValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "groups");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string[]));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._groupsField = ((string[])(tc.ConvertFrom(parameterValue)));
            groupsValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String[]\' of the parameter \'groups\' did not match the type of th" +
                    "e data passed to the template.");
        }
    }
}
if ((groupsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("groups");
    if ((data != null))
    {
        this._groupsField = ((string[])(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class GeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
