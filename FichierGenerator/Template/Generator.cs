// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FichierGenerator.Template
{
    using Microsoft.VisualStudio.TextTemplating;
    using System;
    using System.Linq;
    using System.Xml.Linq;
    using System.Collections;
    using System.Collections.Generic;
    using FichierGenerator;
    using System.Text.RegularExpressions;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Generator : GeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n\r\n");
            this.Write("\r\n");
            
            #line 20 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
	string class_namespace = archiDocument.Class_namespace;
	// Open the prototype document.
	XElement doc = archiDocument.Doc;

	// Get the nampespaces 
	XNamespace NP = archiDocument.NP1;
	XNamespace xmlns_xsi = archiDocument.Xmlns_xsi;

	// Map id_element - all elements related
	Dictionary<string, List<string>> dict_related_element = archiDocument.Dict_related_element;

	// list of group
	List<string> list_group = archiDocument.List_group;

	// list of elements
	List<string> list_element = archiDocument.List_element;

	// Map idProperty - PropertyName
	Dictionary<string, string> property_definition_map = archiDocument.Property_definition_map;

	// Map group_id - list_id_elements + list_id_interface
	Dictionary<string, Dictionary<string,List<string>>> dict_group = archiDocument.Dict_group;

	// Map group_id - namespace
	Dictionary<string, string> dict_group_name = archiDocument.Dict_group_name;

	// Map id_element - namespace
	Dictionary<string, string> dict_namespace = archiDocument.Dict_namespace;

	// Map id_element - group
	Dictionary<string, string> dict_element_group = archiDocument.Dict_element_group;

	// Map view_id - list_id_elements
	Dictionary<string, List<string>> dict_view = archiDocument.Dict_view;
	
	// Map identifier - element
	Dictionary<string, Element> dict_element = archiDocument.Dict_element;

	// Map identifier - relationship name
	Dictionary<Tuple<string, string>, string> dict_relationship = archiDocument.Dict_relationship;

	// MultiMap of id_element - [source|target] - [type de relation] - list_id_element
	Dictionary<string, Dictionary<string, Dictionary<string, List<string>>>> mmap_relationship = archiDocument.Mmap_relationship;

	// Map of specialization of class
	Dictionary<string, List<string>> mmap_specialization = archiDocument.Mmap_specialization;

	// MultiMap of association
	Dictionary<string, List<string>> mmap_association = archiDocument.Mmap_association;

	// MultiMap of group access (to generate using ...)
	Dictionary<string, List<string>> mmap_group_access = archiDocument.Mmap_group_access;

	// MultiMap of element access (a kind of relationship between elements)
	Dictionary<string, List<string>> mmap_element_access = archiDocument.Mmap_element_access;

	// List of representation
	List<string> list_representation = new List<string>();
	
	// List of data object
	List<string> list_data_object = new List<string>();

	// List of errors
	List<string> errors = archiDocument.Errors;

	// List of class created
	List<string> classes = archiDocument.Classes;

	IEnumerable<string> list_group_new = archiDocument.List_group_new;

            
            #line default
            #line hidden
            this.Write("\r\nusing System.Collections.Generic;\r\n\r\n");
            
            #line 94 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	// Generate used namespaces
	foreach(var id_group in mmap_group_access.Keys)
	{
		foreach(var id in mmap_group_access[id_group])
		{

            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 101 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dict_group_name[id]));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 102 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		}
	}

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 107 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	// Generate classes from group
	foreach(var id_group in list_group_new)
	{
		List<string> list_idElement = dict_group[id_group]["class"];
		List<string> list_idInterface = dict_group[id_group]["interface"];

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 114 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dict_group_name[id_group]));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 116 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

		// generate interface
		foreach(var id_interface in list_idInterface)
		{
			if(list_element.Contains(id_interface))
			{
				Element ele_interface = dict_element[id_interface]; 
				string class_name = ele_interface.Class_name_;
				
				if(mmap_relationship.ContainsKey(id_interface))
				{
					List<string> list_realization;
					if(mmap_relationship[id_interface]["source"].TryGetValue("Realization", out list_realization))
					{
						foreach(var i in list_realization)
						{
							Element element_associated = dict_element[i];
							if (element_associated.Type_.Equals("BusinessInterface")||element_associated.Type_.Equals("Requirement"))
							{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 136 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 136 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 137 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}

					List<string> list_influence;
					if(mmap_relationship[id_interface]["source"].TryGetValue("Influence", out list_influence))
					{
						foreach(var i in list_influence)
						{
							Element element_associated = dict_element[i];
							if (element_associated.Type_.Equals("ApplicationService"))
							{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 151 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 151 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 152 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}
					
					List<string> list_access;
					if(mmap_relationship[id_interface]["source"].TryGetValue("Access", out list_access))
					{
						foreach(var i in list_access)
						{
							Element element_associated = dict_element[i];
							if (element_associated.Type_.Equals("Contrat"))
							{
								

            
            #line default
            #line hidden
            this.Write("\t[Contract(\"");
            
            #line 167 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\",\"");
            
            #line 167 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Class_name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 168 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}
				}

				if (!mmap_specialization.Keys.Contains(id_interface))
				{

            
            #line default
            #line hidden
            this.Write("\tpublic interface ");
            
            #line 177 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n");
            
            #line 179 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
				}
				else
				{
					List<string> list_parent_name = new List<string>();
					foreach(var e in mmap_specialization[id_interface])
						list_parent_name.Add(dict_element[e].Class_name_);
					string str_parents = String.Join(", ", list_parent_name.Select(i => StringHelper.UpperString(i.ToString())).ToArray());

            
            #line default
            #line hidden
            this.Write("\tpublic interface ");
            
            #line 188 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 188 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str_parents));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n\r\n");
            
            #line 191 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				}

				if( mmap_association.ContainsKey(id_interface))
				{
					foreach(var id_associated in mmap_association[id_interface])
					{
						if(dict_element.ContainsKey(id_associated))
						{
							Element element_associated = dict_element[id_associated];
							if(element_associated.Equals("ApplicationInterface"))
							{
								Tuple<string, string> tuple =  new Tuple<string, string>(id_interface,id_associated);
								string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 206 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 206 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 208 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}
				}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 216 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

			}
		}

		foreach(var id_element in list_idElement)
		{
			Element ele = dict_element[id_element]; 
			string class_name = ele.Class_name_;

			if(archiDocument.Types.Contains(ele.Type_))
			{
				// Generate representation
				if(ele.Type_.Equals("Representation"))
				{
					list_representation.Add(id_element);

            
            #line default
            #line hidden
            this.Write("\tpublic interface I");
            
            #line 232 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write("{}\r\n\r\n");
            
            #line 234 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					if (mmap_relationship.ContainsKey(id_element))
					{
						List<string> list_associated;
						if (mmap_relationship[id_element]["source"].TryGetValue("Realization", out list_associated))
						{
							foreach(var id_associated in list_associated)
							{
								if(dict_element.ContainsKey(id_associated))
								{
									Element element_associated = dict_element[id_associated];
									if(element_associated.Type_.Equals("Requirement"))
									{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 248 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 248 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 249 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

									}
								}
							}
						}
					}

					if( mmap_association.ContainsKey(id_element))
					{
						foreach(var id_associated in mmap_association[id_element])
						{
							if(dict_element.ContainsKey(id_associated))
							{
								Element element_associated = dict_element[id_associated];
								if( element_associated.Type_.Equals("BusinessService") || 
									element_associated.Type_.Equals("ApplicationProcess"))
								{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 267 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 267 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 268 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
								if(element_associated.Type_.Equals("Artifact"))
								{

            
            #line default
            #line hidden
            this.Write("\t[Reference(\"");
            
            #line 273 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 274 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
							}
						}
					}


					if (!mmap_specialization.Keys.Contains(id_element))
					{

            
            #line default
            #line hidden
            this.Write("\t[Model(");
            
            #line 284 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 284 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(class_name));
            
            #line default
            #line hidden
            this.Write("\")]\r\n\tpartial class ");
            
            #line 285 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n");
            
            #line 287 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
					}
					else
					{
						List<string> list_parent_name = new List<string>();
						foreach(var e in mmap_specialization[id_element])
						{
							if(e.Contains("id"))
								list_parent_name.Add(dict_element[e].Class_name_);
							else
								list_parent_name.Add(e);
						}
						string str_parents = String.Join(", ", list_parent_name.Select(i => StringHelper.UpperString(i.ToString())).ToArray());
						

            
            #line default
            #line hidden
            this.Write("\t[Model(");
            
            #line 302 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 302 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(class_name));
            
            #line default
            #line hidden
            this.Write("\")]\r\n\tpartial class ");
            
            #line 303 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 303 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str_parents));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 305 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					}

					// Generate all properties
					foreach(var p in ele.Properties_.Keys)
					{
						if (p!="Implementation")
						{

            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t");
            
            #line 314 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Properties_[p]));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 314 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 315 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

						}
					}

					// Generate representation constructor 

					string className = "";
					string typeName = "";
					string varName = "";
					IEnumerable<XElement> xele_process = from e in doc.Descendants(NP + "relationship")
															where e.Attribute(xmlns_xsi + "type").Value == "Access" &&
																e.Attribute("target").Value.Equals(ele.Identifier_) &&
																dict_element[e.Attribute("source").Value].Type_.Equals("ApplicationProcess")
															select e;
					foreach(var xp in xele_process)
					{
						className = dict_element[xp.Attribute("source").Value].Class_name_;
						typeName = StringHelper.UpperString(className);
						varName = xp.Element(NP + "properties") == null ? StringHelper.LowerString(className) : xp.Descendants(NP + "value").First().Value;

            
            #line default
            #line hidden
            this.Write("\t\tI");
            
            #line 335 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 335 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 336 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					}

            
            #line default
            #line hidden
            this.Write("\t\tpublic\t");
            
            #line 339 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write("(IWorkflow caller)\r\n\t\t{\r\n\t\t\t");
            
            #line 341 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(varName));
            
            #line default
            #line hidden
            this.Write(" = caller as ");
            
            #line 341 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t}\r\n");
            
            #line 343 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					// Generate référence d'une classe.
					if( mmap_association.ContainsKey(id_element))
					{
						foreach(var id_associated in mmap_association[id_element])
						{
							if(dict_element.ContainsKey(id_associated))
							{
								Element element_associated = dict_element[id_associated];
								if(element_associated.Equals("BusinessObject") || 
								   element_associated.Equals("ApplicationInterface"))
								{
									Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
									string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 358 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 358 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 360 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
							}
						}
					}

					if (mmap_relationship.ContainsKey(id_element))
					{
						List<string> list_associated;
						if (mmap_relationship[id_element]["source"].TryGetValue("Access", out list_associated))
						{
							foreach(var id_associated in list_associated)
							{
								if(dict_element.ContainsKey(id_associated))
								{
									Element element_associated = dict_element[id_associated];
									if(element_associated.Type_.Equals("ApplicationProcess"))
									{
										Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
										string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 381 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 381 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 383 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

									}
								}
							}
						}
					}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 392 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				}

				// Generate BusinessObject
				if(ele.Type_.Equals("BusinessObject"))
				{

            
            #line default
            #line hidden
            this.Write("\t[Model(");
            
            #line 399 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 399 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(class_name));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 400 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					if (mmap_relationship.ContainsKey(id_element))
					{
						List<string> list_associated;
						if (mmap_relationship[id_element]["source"].TryGetValue("Realization", out list_associated))
						{
							foreach(var id_associated in list_associated)
							{
								if(dict_element.ContainsKey(id_associated))
								{
									Element element_associated = dict_element[id_associated];
									if(element_associated.Type_.Equals("Requirement"))
									{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 414 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 414 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 415 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

									}
								}
							}
						}
					}

					if (!mmap_specialization.Keys.Contains(id_element))
					{

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 425 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n");
            
            #line 427 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
					}
					else
					{
						List<string> list_parent_name = new List<string>();
						foreach(var e in mmap_specialization[id_element])
						{
							if(e.Contains("id"))
								list_parent_name.Add(dict_element[e].Class_name_);
							else
								list_parent_name.Add(e);
						}
						string str_parents = String.Join(", ", list_parent_name.Select(i => StringHelper.UpperString(i.ToString())).ToArray());
						

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 442 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 442 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str_parents));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 444 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					}

					// Generate all properties
					foreach(var p in ele.Properties_.Keys)
					{
						if (!p.Contains("$"))
						{

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 453 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Properties_[p]));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 453 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 455 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

						}
					}

					// Generate collection sur classe.
					if( mmap_relationship.ContainsKey(id_element) && 
						mmap_relationship[id_element].ContainsKey("source") && 
						mmap_relationship[id_element]["source"].ContainsKey("Aggregation") )
					{
						foreach (var idTarget in mmap_relationship[id_element]["source"]["Aggregation"])
						{
							Element elementTarget = dict_element[idTarget];
							if (elementTarget.Type_.Equals("BusinessObject"))
							{
								Tuple<string, string> tuple =  new Tuple<string, string>(id_element,idTarget);
								string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(elementTarget.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\tList<");
            
            #line 472 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Class_name_)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 472 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n");
            
            #line 473 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}

					// Generate référence d'une classe.
					if( mmap_association.ContainsKey(id_element))
					{
						foreach(var id_associated in mmap_association[id_element])
						{
							if(dict_element.ContainsKey(id_associated))
							{
								Element element_associated = dict_element[id_associated];
								if(element_associated.Equals("BusinessObject"))
								{
									Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
									string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 491 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 491 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 493 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
							}
						}
					}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 501 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				}

				// Generate Contract
				if(ele.Type_.Equals("Contract")&&ele.Properties_.ContainsKey("Implementation"))
				{

            
            #line default
            #line hidden
            this.Write("\t[Model(");
            
            #line 508 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 508 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(class_name));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 509 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					if (mmap_relationship.ContainsKey(id_element))
					{
						List<string> list_associated;
						if (mmap_relationship[id_element]["source"].TryGetValue("Realization", out list_associated))
						{
							foreach(var id_associated in list_associated)
							{
								if(dict_element.ContainsKey(id_associated))
								{
									Element element_associated = dict_element[id_associated];
									if(element_associated.Type_.Equals("Requirement"))
									{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 523 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 523 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 524 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

									}
								}
							}
						}
					}

					if (!mmap_specialization.Keys.Contains(id_element))
					{

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 534 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n");
            
            #line 536 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
					}
					else
					{
						List<string> list_parent_name = new List<string>();
						foreach(var e in mmap_specialization[id_element])
						{
							if(e.Contains("id"))
								list_parent_name.Add(dict_element[e].Class_name_);
							else
								list_parent_name.Add(e);
						}
						string str_parents = String.Join(", ", list_parent_name.Select(i => StringHelper.UpperString(i.ToString())).ToArray());
						

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 551 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 551 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str_parents));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 553 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					}

					// Generate collection sur classe.
					if( mmap_relationship.ContainsKey(id_element) && 
						mmap_relationship[id_element].ContainsKey("source") && 
						mmap_relationship[id_element]["source"].ContainsKey("Aggregation") )
					{
						foreach (var idTarget in mmap_relationship[id_element]["source"]["Aggregation"])
						{
							Element elementTarget = dict_element[idTarget];
							if (elementTarget.Type_.Equals("Contract"))
							{
								Tuple<string, string> tuple =  new Tuple<string, string>(id_element,idTarget);
								string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(elementTarget.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\tList<");
            
            #line 569 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Class_name_)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 569 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 571 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}

					// Generate référence d'une classe.
					if( mmap_association.ContainsKey(id_element))
					{
						foreach(var id_associated in mmap_association[id_element])
						{
							if(dict_element.ContainsKey(id_associated))
							{
								Element element_associated = dict_element[id_associated];
								if(element_associated.Equals("Contract"))
								{
									Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
									string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 589 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 589 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 591 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
							}
						}
					}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 599 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				}

				// Generate ApplicationService
				if(ele.Type_.Equals("ApplicationService"))
				{

            
            #line default
            #line hidden
            this.Write("\t[Model(");
            
            #line 606 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 606 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(class_name));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 607 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					// Generate attributes
					if( mmap_relationship.ContainsKey(id_element) )
					{
						if ( mmap_relationship[id_element].ContainsKey("source") && 
							 mmap_relationship[id_element]["source"].ContainsKey("Realization") )
						{
							List<string> list_associated;
							if (mmap_relationship[id_element]["source"].TryGetValue("Realization", out list_associated))
							{
								foreach(var id_associated in list_associated)
								{
									if(dict_element.ContainsKey(id_associated))
									{
										Element element_associated = dict_element[id_associated];
										if(element_associated.Type_.Equals("Requirement")||element_associated.Type_.Equals("BusinessService"))
										{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 625 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 625 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 626 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

										}
									}
								}
							}
						}

						List<string> list_access;
						if(mmap_relationship[id_element]["source"].TryGetValue("Access", out list_access))
						{
							foreach(var i in list_access)
							{
								Element element_associated = dict_element[i];
								if (element_associated.Type_.Equals("Contrat"))
								{
								

            
            #line default
            #line hidden
            this.Write("\t[Contract(\"");
            
            #line 643 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\",\"");
            
            #line 643 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Class_name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 644 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
							}
						}
					}

					if (!mmap_specialization.Keys.Contains(id_element))
					{

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 653 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n");
            
            #line 655 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
					}
					else
					{
						List<string> list_parent_name = new List<string>();
						foreach(var e in mmap_specialization[id_element])
						{
							if(e.Contains("id"))
								list_parent_name.Add(dict_element[e].Class_name_);
							else
								list_parent_name.Add(e);
						}
						string str_parents = String.Join(", ", list_parent_name.Select(i => StringHelper.UpperString(i.ToString())).ToArray());
						

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 670 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 670 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str_parents));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 672 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					}

					// Generate collection sur classe.
					if( mmap_relationship.ContainsKey(id_element) && 
						mmap_relationship[id_element].ContainsKey("source") && 
						mmap_relationship[id_element]["source"].ContainsKey("Aggregation") )
					{
						foreach (var idTarget in mmap_relationship[id_element]["source"]["Aggregation"])
						{
							Element elementTarget = dict_element[idTarget];
							if (elementTarget.Type_.Equals("ApplicationService"))
							{
								Tuple<string, string> tuple =  new Tuple<string, string>(id_element,idTarget);
								string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(elementTarget.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\tList");
            
            #line 688 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 688 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 690 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}

						List<string> list;
						if(mmap_relationship[id_element]["source"].TryGetValue("Access", out list))
						{
							foreach (var idTarget in list)
							{
								Element elementTarget = dict_element[idTarget];
								if (elementTarget.Type_.Equals("ApplicationService"))
								{
									Tuple<string, string> tuple =  new Tuple<string, string>(id_element,idTarget);
									string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(elementTarget.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 705 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 705 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 707 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
							}
						}
					}

					// Generate référence d'une classe.
					if( mmap_association.ContainsKey(id_element))
					{
						foreach(var id_associated in mmap_association[id_element])
						{
							if(dict_element.ContainsKey(id_associated))
							{
								Element element_associated = dict_element[id_associated];
								if(element_associated.Equals("ApplicationService"))
								{
									Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
									string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 726 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 726 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 728 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
							}
						}
					}

					if (mmap_relationship.ContainsKey(id_element))
					{
						List<string> list_associated;
						if (mmap_relationship[id_element]["source"].TryGetValue("Access", out list_associated))
						{
							foreach(var id_associated in list_associated)
							{
								if(dict_element.ContainsKey(id_associated))
								{
									Element element_associated = dict_element[id_associated];
									if(element_associated.Type_.Equals("ApplicationProcess"))
									{
										Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
										string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 749 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 749 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 751 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

									}
								}
							}
						}
					}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 760 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				}

				// Generate ApplicationEvent
				if(ele.Type_.Equals("ApplicationEvent")&&ele.Properties_.ContainsKey("Implementation"))
				{
					// Generate attributes
					if( mmap_relationship.ContainsKey(id_element) &&
						mmap_relationship[id_element].ContainsKey("source") && 
						mmap_relationship[id_element]["source"].ContainsKey("Realization") )
					{
						List<string> list_associated;
						if (mmap_relationship[id_element]["source"].TryGetValue("Realization", out list_associated))
						{
							foreach(var id_associated in list_associated)
							{
								if(dict_element.ContainsKey(id_associated))
								{
									Element element_associated = dict_element[id_associated];
									if(element_associated.Type_.Equals("Requirement"))
									{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 782 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 782 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 783 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

									}
								}
							}
						}
					}

					if( mmap_association.ContainsKey(id_element))
					{
						foreach(var id_associated in mmap_association[id_element])
						{
							if(dict_element.ContainsKey(id_associated))
							{
								Element element_associated = dict_element[id_associated];
								if(element_associated.Equals("BusinessEvent"))
								{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 800 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 800 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 801 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
							}
						}
					}
				
					if (!mmap_specialization.Keys.Contains(id_element))
					{

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 810 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n");
            
            #line 812 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
					}
					else
					{
						List<string> list_parent_name = new List<string>();
						foreach(var e in mmap_specialization[id_element])
						{
							if(e.Contains("id"))
								list_parent_name.Add(dict_element[e].Class_name_);
							else
								list_parent_name.Add(e);
						}
						string str_parents = String.Join(", ", list_parent_name.Select(i => StringHelper.UpperString(i.ToString())).ToArray());
						

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 827 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 827 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str_parents));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 829 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					}

					// Generate référence d'une classe.
					if( mmap_association.ContainsKey(id_element))
					{
						foreach(var id_associated in mmap_association[id_element])
						{
							if(dict_element.ContainsKey(id_associated))
							{
								Element element_associated = dict_element[id_associated];
								if(element_associated.Equals("ApplicationEvent"))
								{
									Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
									string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 845 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 845 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 847 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
							}
						}
					}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 855 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				}

				// Generate ApplicationProcess
				if(ele.Type_.Equals("ApplicationProcess"))
				{

            
            #line default
            #line hidden
            this.Write("\t[Model(");
            
            #line 862 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 862 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(class_name));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 863 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					// Generate attributes
					if( mmap_relationship.ContainsKey(id_element) &&
						mmap_relationship[id_element].ContainsKey("source") && 
						mmap_relationship[id_element]["source"].ContainsKey("Realization") )
					{
						List<string> list_associated;
						if (mmap_relationship[id_element]["source"].TryGetValue("Realization", out list_associated))
						{
							foreach(var id_associated in list_associated)
							{
								if(dict_element.ContainsKey(id_associated))
								{
									Element element_associated = dict_element[id_associated];
									if( element_associated.Type_.Equals("Requirement") ||
										element_associated.Type_.Equals("BusinessFunction") ||
										element_associated.Type_.Equals("BusinessProcess"))
									{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 882 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 882 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 883 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

									}
								}
							}
						}
					}

					if( mmap_association.ContainsKey(id_element))
					{
						foreach(var id_associated in mmap_association[id_element])
						{
							if(dict_element.ContainsKey(id_associated))
							{
								Element element_associated = dict_element[id_associated];
								if(element_associated.Equals("BusinessEvent"))
								{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 900 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 900 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 901 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

								}
							}
						}
					}
				
					if (!mmap_specialization.Keys.Contains(id_element))
					{

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 910 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n");
            
            #line 912 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
					}
					else
					{
						List<string> list_parent_name = new List<string>();
						foreach(var e in mmap_specialization[id_element])
						{
							if(e.Contains("id"))
								list_parent_name.Add(dict_element[e].Class_name_);
							else
								list_parent_name.Add(e);
						}
						string str_parents = String.Join(", ", list_parent_name.Select(i => StringHelper.UpperString(i.ToString())).ToArray());
						

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 927 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 927 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str_parents));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 929 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					}

					// Generate reference of a class
					if (mmap_relationship.ContainsKey(id_element))
					{
						List<string> list_associated;
						if (mmap_relationship[id_element]["source"].TryGetValue("Access", out list_associated))
						{
							foreach(var id_associated in list_associated)
							{
								if(dict_element.ContainsKey(id_associated))
								{
									Element element_associated = dict_element[id_associated];
									if( element_associated.Type_.Equals("BusinessOnject") || 
										element_associated.Type_.Equals("Representation") || 
										element_associated.Type_.Equals("DataObject"))
									{
										Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
										string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 950 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 950 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 952 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

									}
								}
							}
						}

						List<string> list_flow;
						if (mmap_relationship[id_element]["source"].TryGetValue("Flow", out list_flow))
						{
							foreach(var id_associated in list_flow)
							{
								if(dict_element.ContainsKey(id_associated))
								{
									Element element_associated = dict_element[id_associated];
									if( element_associated.Type_.Equals("ApplicationProcess") || 
										element_associated.Type_.Equals("ApplicationFunction") )
									{
										Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
										string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(element_associated.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 972 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(element_associated.Class_name_)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 972 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n\r\n");
            
            #line 974 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

									}
								}
							}
						}
					}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 983 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

			}

				// Generate DataObject
				if(ele.Type_.Equals("DataObject"))
				{
					list_data_object.Add(id_element);

            
            #line default
            #line hidden
            this.Write("\t[Model(");
            
            #line 991 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 991 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(class_name));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 992 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					// Generate attributes
					if( mmap_relationship.ContainsKey(id_element) &&
						mmap_relationship[id_element].ContainsKey("source") && 
						mmap_relationship[id_element]["source"].ContainsKey("Realization") )
					{
						List<string> list_associated;
						if (mmap_relationship[id_element]["source"].TryGetValue("Realization", out list_associated))
						{
							foreach(var id_associated in list_associated)
							{
								if(dict_element.ContainsKey(id_associated))
								{
									Element element_associated = dict_element[id_associated];
									if( element_associated.Type_.Equals("Requirement") ||
										element_associated.Type_.Equals("BusinessFunction") ||
										element_associated.Type_.Equals("BusinessProcess"))
									{

            
            #line default
            #line hidden
            this.Write("\t[ReferenceModel(");
            
            #line 1011 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Type_));
            
            #line default
            #line hidden
            this.Write("Archimate, \"");
            
            #line 1011 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(element_associated.Name_));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 1012 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

									}
								}
							}
						}
					}

					if (!mmap_specialization.Keys.Contains(id_element))
					{

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 1022 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n");
            
            #line 1024 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
	
					}
					else
					{
						List<string> list_parent_name = new List<string>();
						foreach(var e in mmap_specialization[id_element])
						{
							if(e.Contains("id"))
								list_parent_name.Add(dict_element[e].Class_name_);
							else
								list_parent_name.Add(e);
						}
						string str_parents = String.Join(", ", list_parent_name.Select(i => StringHelper.UpperString(i.ToString())).ToArray());
						

            
            #line default
            #line hidden
            this.Write("\tpartial class ");
            
            #line 1039 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(class_name)));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 1039 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str_parents));
            
            #line default
            #line hidden
            this.Write("\r\n\t{\r\n");
            
            #line 1041 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

					}

					// Generate all properties
					foreach(var p in ele.Properties_.Keys)
					{
						if (p!="Implementation")
						{

            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t");
            
            #line 1050 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ele.Properties_[p]));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 1050 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 1052 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

						}
					}

					// Generate collection sur classe.
					if( mmap_relationship.ContainsKey(id_element) && 
						mmap_relationship[id_element].ContainsKey("source") && 
						mmap_relationship[id_element]["source"].ContainsKey("Aggregation") )
					{
						foreach (var idTarget in mmap_relationship[id_element]["source"]["Aggregation"])
						{
							Element elementTarget = dict_element[idTarget];
							if (elementTarget.Type_.Equals("DataObject"))
							{
								Tuple<string, string> tuple =  new Tuple<string, string>(id_element,idTarget);
								string var_name = dict_relationship.ContainsKey(tuple) ? StringHelper.LowerString(dict_relationship[tuple]) : StringHelper.LowerString(elementTarget.Class_name_);

            
            #line default
            #line hidden
            this.Write("\t\tList<");
            
            #line 1069 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringHelper.UpperString(elementTarget.Class_name_)));
            
            #line default
            #line hidden
            this.Write("> ");
            
            #line 1069 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(var_name));
            
            #line default
            #line hidden
            this.Write("_ ;\r\n");
            
            #line 1070 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

							}
						}
					}

            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n");
            
            #line 1077 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

				}

			}
		}

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 1085 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	}

            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 1089 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

	private bool isInSelectedGroups(string id, Dictionary<string, Dictionary<string,List<string>>> dict_group)
	{
		foreach(var g in dict_group.Keys)
		{
			foreach(var sg in dict_group[g].Keys)
				if(dict_group[g][sg].Contains(id))
					return true;
		}
		return false;
	}

	private bool isInSelectedViews(string id, Dictionary<string, List<string>> dict_view)
	{
		foreach(var v in dict_view.Keys)
		{
			if(dict_view[v].Contains(id))
				return true;
		}
		return false;
	}

	private void findAllElement(Dictionary<string, Element> dict_element, XNamespace xmlns_xsi, XNamespace NP, XElement root, XElement node, ref List<string> list, ref List<string> list_group)
	{
		IEnumerable<XElement> xeles_node = from e in node.Descendants(NP + "node")
										   select e;
		foreach(var n in xeles_node)
		{
			if(n.Attribute(xmlns_xsi + "type").Value=="Element")
			{
				string id = n.Attribute("elementRef").Value;
				if(!dict_element[id].Type_.Equals("Grouping"))
					list.Add(n.Attribute("elementRef").Value);
				else
					list_group.Add(n.Attribute("elementRef").Value);
			}
			else if(n.Attribute(xmlns_xsi + "type").Value=="Label" && n.Element(NP + "viewRef")!=null)
			{
				XElement container = root.Descendants(NP + "view").FirstOrDefault(el => el.Attribute("identifier").Value == n.Element(NP + "viewRef").Attribute("ref").Value);
				if (container != null )
					findAllElement(dict_element, xmlns_xsi, NP, root, container, ref list, ref list_group);
			}
			else if(n.Attribute(xmlns_xsi + "type").Value=="Container")
			{
				findAllElement(dict_element, xmlns_xsi, NP, root, n, ref list, ref list_group);
			}
		}
	}

	private void addImplementation(ref Dictionary<string, List<string>> mmap_specialization, string id_child, string parent)
	{
		if (!mmap_specialization.ContainsKey(id_child))
		{
			List<string> list_parent = new List<string>();
			list_parent.Add(parent);
			mmap_specialization.Add(id_child,list_parent);
		}
		else 
		{
			mmap_specialization[id_child].Add(parent);
		}
	}

        
        #line default
        #line hidden
        
        #line 11 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\StringHelper.ttinclude"

	class StringHelper {
	
		// Method for creating the class name, deleting the spaces, special characters and uppercasing the string
		public static string UpperString(string name)
		{
			//name = Regex.Replace(name, @"\s\(.*\)", "");
			name = name.Replace(' ','_');
			name = name.Replace('.','_');
			name = Regex.Replace(name, @"[^\w\.@_]", "");
			return name[0].ToString().ToUpperInvariant() + name.Substring(1);
		}

		// Method for creating the object name, deleting the spaces, special characters and lowercasing the string
		public static string LowerString(string name)
		{
			//name = Regex.Replace(name, @"\s\(.*\)", "");
			name = name.Replace(' ','_');
			name = name.Replace('.','_');
			name = Regex.Replace(name, @"[^\w\.@_]", "");
			return name[0].ToString().ToLowerInvariant() + name.Substring(1);
		}

		// Method to delete line feed characters like \r, \n 
		public static string DocumentationTraitement(string document)
		{
			document = document.Replace("&#xD;","");
			document = document.Replace("\r"," ");
			document = document.Replace("\n"," ");
			document = document.Replace("\t"," ");
			document = Regex.Replace(document, "\\s{2,}", " ");
			document = document.Replace("\"","\\\"");
			return document;
		}
	}

        
        #line default
        #line hidden
        
        #line 1 "D:\documents\INSA\maidis\vs\Projet\FichierGenerator\FichierGenerator\Template\Generator.tt"

private global::FichierGenerator.ArchiDocument _archiDocumentField;

/// <summary>
/// Access the archiDocument parameter of the template.
/// </summary>
private global::FichierGenerator.ArchiDocument archiDocument
{
    get
    {
        return this._archiDocumentField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool archiDocumentValueAcquired = false;
if (this.Session.ContainsKey("archiDocument"))
{
    this._archiDocumentField = ((global::FichierGenerator.ArchiDocument)(this.Session["archiDocument"]));
    archiDocumentValueAcquired = true;
}
if ((archiDocumentValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "archiDocument");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(global::FichierGenerator.ArchiDocument));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._archiDocumentField = ((global::FichierGenerator.ArchiDocument)(tc.ConvertFrom(parameterValue)));
            archiDocumentValueAcquired = true;
        }
        else
        {
            this.Error("The type \'FichierGenerator.ArchiDocument\' of the parameter \'archiDocument\' did no" +
                    "t match the type of the data passed to the template.");
        }
    }
}
if ((archiDocumentValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("archiDocument");
    if ((data != null))
    {
        this._archiDocumentField = ((global::FichierGenerator.ArchiDocument)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class GeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
