<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="mscorlib" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.TextTemplating.Interfaces" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FichierGenerator" #>
<#@ parameter name="archiDocument" type="FichierGenerator.ArchiDocumentSerialized" #>
<#@ parameter name="id_element" type="System.String" #>
<#@ include file="InitVar.ttinclude" #>
using System.Collections.Generic;
<#	
	// Generate used namespaces
	List<string> list_using;
	if(mmap_group_access.TryGetValue(id_group, out list_using))
	{
		foreach(var id in list_using)
		{
#>
using <#= dict_group_name[id] #>;
<#
		}
	}

	if(dict_using.TryGetValue(id_element, out list_using))
	{
		list_using = list_using.Distinct().ToList();
		foreach(var id in list_using)
		{
#>
using <#= dict_group_name[id] #>;
<#
		}
	}
#>

namespace <#= dict_group_name[id_group] #>
{
	[Model(<#= ele.Type_ #>Archimate, "<#= class_name #>")]
<#
	// Generate attributes
	if (mmap_relationship.ContainsKey(id_element))
	{
		List<string> list_associated;
		if (mmap_relationship[id_element]["source"].TryGetValue("Realization", out list_associated))
		{
			foreach(var id_associated in list_associated)
			{
				if(dict_element.ContainsKey(id_associated))
				{
					Element element_associated = dict_element[id_associated];
					if(element_associated.Type_.Equals("Requirement"))
					{
#>
	[ReferenceModel(<#= element_associated.Type_ #>Archimate, "<#= element_associated.Name_ #>")]
<#
					}
				}
			}
		}
					
		if ( mmap_relationship[id_element]["source"].TryGetValue("Assocciation", out list_associated))
		{
			foreach(var id_associated in list_associated)
			{
				if(dict_element.ContainsKey(id_associated))
				{
					Element element_associated = dict_element[id_associated];
					if(element_associated.Properties_["$type"].Equals("Macro")||element_associated.Type_.Equals("ApplicationService"))
					{
#>
	[ReferenceModel(<#= element_associated.Type_ #>Archimate, "<#= element_associated.Name_ #>")]
<#
					}
				}
			}
		}

		List<string> list_access;
		if(mmap_relationship[id_element]["source"].TryGetValue("Access", out list_access))
		{
			foreach(var i in list_access)
			{
				Element element_associated = dict_element[i];
				if (element_associated.Type_.Equals("ApplicationService"))
				{
								
#>
	[Contract("<#=element_associated.Name_#>","<#=element_associated.Class_name_#>")]
<#
				}
			}
		}
	}

	if (!mmap_specialization.Keys.Contains(id_element))
	{
#>
	partial class <#= UpperString(class_name) #> 
	{
<#	
	}
	else
	{
		List<string> list_parent_name = new List<string>();
		foreach(var e in mmap_specialization[id_element])
		{
			if(e.Contains("id"))
				list_parent_name.Add(dict_element[e].Class_name_);
			else
				list_parent_name.Add(e);
		}
		string str_parents = String.Join(", ", list_parent_name.Select(i => UpperString(i.ToString())).ToArray());
						
#>
	partial class <#= UpperString(class_name) #> : <#= str_parents#>
	{
<#
	}

	// Generate collection sur classe.
	if( mmap_relationship.ContainsKey(id_element) && 
		mmap_relationship[id_element].ContainsKey("source") && 
		mmap_relationship[id_element]["source"].ContainsKey("Aggregation") )
	{
		foreach (var idTarget in mmap_relationship[id_element]["source"]["Aggregation"])
		{
			Element elementTarget = dict_element[idTarget];
			if (elementTarget.Type_.Equals("Contract"))
			{
				Tuple<string, string> tuple =  new Tuple<string, string>(id_element,idTarget);
				string var_name = dict_relationship.ContainsKey(tuple) ? LowerString(dict_relationship[tuple]) : LowerString(elementTarget.Class_name_);
#>
		List<<#= UpperString(elementTarget.Class_name_) #>> <#= var_name #>_ ;

<#
			}
		}
	}

	// Generate référence d'une classe.
	if( mmap_association.ContainsKey(id_element))
	{
		foreach(var id_associated in mmap_association[id_element])
		{
			if(dict_element.ContainsKey(id_associated))
			{
				Element element_associated = dict_element[id_associated];
				if(element_associated.Equals("Contract"))
				{
					Tuple<string, string> tuple =  new Tuple<string, string>(id_element,id_associated);
					string var_name = dict_relationship.ContainsKey(tuple) ? LowerString(dict_relationship[tuple]) : LowerString(element_associated.Class_name_);
#>
		<#= UpperString(element_associated.Class_name_) #> <#= var_name #>_ ;

<#
				}
			}
		}
	}
#>
	}
}

<#+
	private bool isInSelectedGroups(string id, Dictionary<string, Dictionary<string,List<string>>> dict_group)
	{
		foreach(var g in dict_group.Keys)
		{
			foreach(var sg in dict_group[g].Keys)
				if(dict_group[g][sg].Contains(id))
					return true;
		}
		return false;
	}

	private bool isInSelectedViews(string id, Dictionary<string, List<string>> dict_view)
	{
		foreach(var v in dict_view.Keys)
		{
			if(dict_view[v].Contains(id))
				return true;
		}
		return false;
	}

	private void addImplementation(ref Dictionary<string, List<string>> mmap_specialization, string id_child, string parent)
	{
		if (!mmap_specialization.ContainsKey(id_child))
		{
			List<string> list_parent = new List<string>();
			list_parent.Add(parent);
			mmap_specialization.Add(id_child,list_parent);
		}
		else 
		{
			mmap_specialization[id_child].Add(parent);
		}
	}

	// Method for creating the class name, deleting the spaces, special characters and uppercasing the string
	public string UpperString(string name)
	{
		//name = Regex.Replace(name, @"\s\(.*\)", "");
		name = name.Replace(".", " ");
        name = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(name);
        name = name.Replace(" ", "");
		name = Regex.Replace(name, @"[^\w\.@_]", "");
		return name[0].ToString().ToUpperInvariant() + name.Substring(1);
	}

	// Method for creating the object name, deleting the spaces, special characters and lowercasing the string
	public string LowerString(string name)
	{
		//name = Regex.Replace(name, @"\s\(.*\)", "");
		name = name.Replace(".", " ");
        name = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(name);
        name = name.Replace(" ", "");
		name = Regex.Replace(name, @"[^\w\.@_]", "");
		return name[0].ToString().ToLowerInvariant() + name.Substring(1);
	}

	// Method to delete line feed characters like \r, \n 
	public string DocumentationTraitement(string document)
	{
		document = document.Replace("&#xD;","");
		document = document.Replace("\r"," ");
		document = document.Replace("\n"," ");
		document = document.Replace("\t"," ");
		document = Regex.Replace(document, "\\s{2,}", " ");
		document = document.Replace("\"","\\\"");
		return document;
	}
#>